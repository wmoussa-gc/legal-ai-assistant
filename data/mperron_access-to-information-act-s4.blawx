- model: blawx.ruledoc
  pk: 1
  fields:
    ruledoc_name: Access to Information Act (s.4)
    rule_text: "Access To Information Act\r\n\r\n4. Right of Access\r\n  (1) Subject
      to this Part, but notwithstanding any other Act of Parliament, every person
      who is\r\n    (a) a Canadian citizen, or\r\n    (b) a permanent resident within
      the meaning of subsection 2(1) of the Immigration and Refugee Protection Act,\r\n
      \ has a right to and shall, on request, be given access to any record under
      the control of a government institution.\r\n  (2) The Governor in Council may,
      by order, extend the right to be given access to records under subsection (1)
      to include persons not referred to in that subsection and may set such conditions
      as the Governor in Council deems appropriate."
    rule_slug: access-to-information-act-s4
    akoma_ntoso: <?xml version="1.0" encoding="UTF-8"?><akomaNtoso xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><act><preface><p
      class="title"><shortTitle>Access To Information Act</shortTitle></p></preface><body><section
      eId="sec_4"><num>4</num><intro><p>Right of Access</p></intro><subSection eId="sec_4__subsec_1"><num>1</num><intro><p>Subject
      to this Part, but notwithstanding any other Act of Parliament, every person
      who is</p></intro><paragraph eId="sec_4__subsec_1__para_a"><num>a</num><content><p>a
      Canadian citizen, or</p></content></paragraph><paragraph eId="sec_4__subsec_1__para_b"><num>b</num><content><p>a
      permanent resident within the meaning of subsection 2(1) of the Immigration
      and Refugee Protection Act,</p></content></paragraph><wrapup><p>has a right
      to and shall, on request, be given access to any record under the control of
      a government institution.</p></wrapup></subSection><subSection eId="sec_4__subsec_2"><num>2</num><content><p>The
      Governor in Council may, by order, extend the right to be given access to records
      under subsection (1) to include persons not referred to in that subsection and
      may set such conditions as the Governor in Council deems appropriate.</p></content></subSection></section></body></act></akomaNtoso>
    navtree: '<nav class="column">

      <div class="lawpart act"><div class="form-check"><input class="form-check-input"
      type="radio" name="section" id="root_section" checked><div class="lawtext"><i
      class="bi bi-caret-right" data-bs-toggle="collapse" data-bs-target="#root"></i>Access
      To Information Act</div></div></div><div class="subparts collapse" id="root"><div
      class="lawpart section"><div class="form-check"><input class="form-check-input"
      type="radio" name="section" id="sec_4_section"><div class="lawtext"><i class="bi
      bi-caret-right" data-bs-toggle="collapse" data-bs-target="#sec_4"></i><num>4</num><intro
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>Right of Access</p></intro></div></div></div><div
      class="subparts collapse" id="sec_4"><div class="lawpart subSection"><div class="form-check"><input
      class="form-check-input" type="radio" name="section" id="sec_4__subsec_1_section"><div
      class="lawtext"><i class="bi bi-caret-right" data-bs-toggle="collapse" data-bs-target="#sec_4__subsec_1"></i><num>1</num><intro
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>Subject to this
      Part, but notwithstanding any other Act of Parliament, every person who is</p></intro></div></div></div><div
      class="subparts collapse" id="sec_4__subsec_1"><div class="lawpart paragraph"><div
      class="form-check"><input class="form-check-input" type="radio" name="section"
      id="sec_4__subsec_1__para_a_section"><div class="lawtext"><num>a</num> <content
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>a Canadian citizen,
      or</p></content></div></div></div><div class="lawpart paragraph"><div class="form-check"><input
      class="form-check-input" type="radio" name="section" id="sec_4__subsec_1__para_b_section"><div
      class="lawtext"><num>b</num> <content xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>a
      permanent resident within the meaning of subsection 2(1) of the Immigration
      and Refugee Protection Act,</p></content></div></div></div><div class="lawtext"><wrapup
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>has a right to and
      shall, on request, be given access to any record under the control of a government
      institution.</p></wrapup></div></div><div class="lawpart subSection"><div class="form-check"><input
      class="form-check-input" type="radio" name="section" id="sec_4__subsec_2_section"><div
      class="lawtext"><num>2</num> <content xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>The
      Governor in Council may, by order, extend the right to be given access to records
      under subsection (1) to include persons not referred to in that subsection and
      may set such conditions as the Governor in Council deems appropriate.</p></content></div></div></div></div></div></nav>'
    scasp_encoding: ''
    tutorial: ''
    owner: 3
    published: false
- model: blawx.workspace
  pk: 1
  fields:
    ruledoc: 1
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 2
  fields:
    ruledoc: 1
    workspace_name: sec_4_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 3
  fields:
    ruledoc: 1
    workspace_name: sec_4__subsec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="oTTDW^|qV`;As^S2Kql8" x="0" y="0"><statement name="statements"><block type="new_category_declaration"
      id="~x?+d4~tP),7VRTzivW$"><field name="category_name">person</field><field name="prefix"></field><field
      name="first_element">object</field><field name="postfix">is a person</field><next><block
      type="new_category_declaration" id="f{7VhMB=EZl4Ss8A+J0E"><field name="category_name">record</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a record</field><next><block type="new_category_declaration" id="4},z--5~PiAS4Ecc8ZCT"><field
      name="category_name">request</field><field name="prefix"></field><field name="first_element">object</field><field
      name="postfix">is a request</field><next><block type="new_category_declaration"
      id="P|}N)T@-RW29^H7-.QU;"><field name="category_name">information</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      information</field><next><block type="new_category_declaration" id="mFBvdQ:5SnHuYT0u!T~w"><field
      name="category_name">government_institution</field><field name="prefix"></field><field
      name="first_element">object</field><field name="postfix">is a government institution</field></block></next></block></next></block></next></block></next></block></statement></block><block
      type="unattributed_fact" id="IWhO(BxtnF+TT{P8:Oh+" x="0" y="323"><statement
      name="statements"><block type="new_attribute_declaration" id="N+t)J@%HmKR6t3!7vi5k"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="record" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">has_a_right_to_access_record</field><field
      name="attribute_type">record</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">has a right to access</field><field
      name="second_element">value</field><field name="postfix"></field><next><block
      type="new_attribute_declaration" id="_Uw9e[dFgkV:gy9UoiKU"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="government_institution" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><field name="attribute_name">under_the_control_of_government_institution</field><field
      name="attribute_type">government_institution</field><field name="order">ov</field><field
      name="prefix"></field><field name="first_element">object</field><field name="infix">is
      under the control of</field><field name="second_element">value</field><field
      name="postfix"></field><next><block type="relationship_declaration" id="vDBbE.JLz)|VBpG6PQ!Q"><mutation
      xmlns="http://www.w3.org/1999/xhtml" prefix1="" type1="person" prefix2="submitted"
      type2="request" prefix3="to institution" type3="government_institution" prefix4="requesting
      access to" type4="record" type_list="[[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="relationship_name">submitted_request_for_record_to_governent_institution</field><field
      name="relationship_arity">4</field><field name="prefix1"></field><field name="type1">person</field><field
      name="prefix2">submitted</field><field name="type2">request</field><field name="prefix3">to
      institution</field><field name="type3">government_institution</field><field
      name="prefix4">requesting access to</field><field name="type4">record</field><field
      name="postfix"></field><next><block type="relationship_declaration" id="-^1Do$b!!vK#SQ79vsyt"><mutation
      xmlns="http://www.w3.org/1999/xhtml" prefix1="" type1="government_institution"
      prefix2="must give" type2="person" prefix3="access to" type3="record" type_list="[[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="relationship_name">must_give_person_access_to_record</field><field name="relationship_arity">3</field><field
      name="prefix1"></field><field name="type1">government_institution</field><field
      name="prefix2">must give</field><field name="type2">person</field><field name="prefix3">access
      to</field><field name="type3">record</field><field name="postfix"></field></block></next></block></next></block></next></block></statement></block><block
      type="attributed_rule" id="My=#sHxuUat4kPDDAvRg" x="-1" y="644"><field name="defeasible">TRUE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="h~}^*`tXC4ojRq%sMzP1"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="Ba@l!HOE)@s1Q-{Phq+s"><field name="variable_name">Person</field></block></value><next><block
      type="new_object_category" id="St{(!+el]_AuVEpk68fC"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="government_institution" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">government_institution</field><value name="object"><block
      type="variable" id="^.FvZhDEVa9Y.jBIt^I]"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="new_object_category" id="61inc2~)OrhsG^uwv^=."><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><value name="object"><block type="variable"
      id="TD4:/6]aIvATS3w,9S/H"><field name="variable_name">Record</field></block></value><next><block
      type="unary_attribute_selector" id="[5A^jMT+.1sm#ei0pDCO"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_4_1_requirement" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a person listed in subsection
      4(1)</field><value name="first_element"><block type="variable" id="L*~6o62F-/.N~M@[|@D2"><field
      name="variable_name">Person</field></block></value><next><block type="attribute_selector"
      id="KBaM#h:hGxlHRBp%U4H^"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="under_the_control_of_government_institution"
      attributetype="government_institution" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is under the control of</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="LctLP?}kMqWp[qOmo_-N"><field
      name="variable_name">Record</field></block></value><value name="second_element"><block
      type="variable" id="jCSGsMLPb1t]n9T/xylS"><field name="variable_name">GovInstitution</field></block></value></block></next></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="M0v]}n5G8Gf9WJUdnP3n"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1_section"></mutation><field
      name="doc_part_name">ATIA 4.1</field></block></value><statement name="conclusion"><block
      type="attribute_selector" id="Nj^0qLzhBHzaC@]4?J^d"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="has_a_right_to_access_record" attributetype="record" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">has a right to access</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="]%6|k?,.Jn2X$fGxzu,Z"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="QrxRtiC;~~e,xC:iF8[/"><field name="variable_name">Record</field></block></value></block></statement></block><block
      type="attributed_rule" id="sBf{$1,ucWhY.qKP|$Ps" x="482" y="644"><field name="defeasible">TRUE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="J^Tg,0xQ.3kUqykX6%[1"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="fHpi4w6k_Z[d%Ui9B+C#"><field name="variable_name">Person</field></block></value><next><block
      type="new_object_category" id="~d]p`hOuv|Q+dU;Fc[Hi"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="government_institution" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">government_institution</field><value name="object"><block
      type="variable" id="A%I9A-yxVFv~E1`d8G.U"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="new_object_category" id="*0OC8o6L~=+p}:3eJcyW"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><value name="object"><block type="variable"
      id="$}uxkJppb|MXeO#qLAAW"><field name="variable_name">Record</field></block></value><next><block
      type="new_object_category" id="1RI_RfdY#YQqIJ8DkOUs"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="request" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">request</field><value name="object"><block type="variable"
      id="kEMp$q[OzV9ew}ye^ZEP"><field name="variable_name">Request</field></block></value><next><block
      type="unary_attribute_selector" id=".w|Z2uLrJ}|SNvGju`D="><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_4_1_requirement" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a person listed in subsection
      4(1)</field><value name="first_element"><block type="variable" id="-~Pmf22S-%-M{Q,E8~%A"><field
      name="variable_name">Person</field></block></value><next><block type="attribute_selector"
      id="!at)`29[tW6/k/D3`Kd:"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="under_the_control_of_government_institution"
      attributetype="government_institution" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is under the control of</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="*-iLOAvI7y?uxzm-U)Td"><field
      name="variable_name">Record</field></block></value><value name="second_element"><block
      type="variable" id="8Gee|6^PQ}K/@DUu|;Io"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="relationship_selector4" id="Am9RR?_?=X4a199d8E*0"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="4" relationship_name="submitted_request_for_record_to_governent_institution"
      type1="person" type2="request" type3="government_institution" type4="record"></mutation><field
      name="prefix1"></field><field name="prefix2">submitted</field><field name="prefix3">to
      institution</field><field name="prefix4">requesting access to</field><field
      name="postfix"></field><value name="parameter1"><block type="variable" id="zWWzE.CCSotpQ3MHk~nu"><field
      name="variable_name">Person</field></block></value><value name="parameter2"><block
      type="variable" id="]7Cf5b$9T$Yreby#E*3w"><field name="variable_name">Request</field></block></value><value
      name="parameter3"><block type="variable" id="uwoX18TgLW=`.!D]BWph"><field name="variable_name">GovInstitution</field></block></value><value
      name="parameter4"><block type="variable" id="U!{^7]KODH?Jg*ZX%.p@"><field name="variable_name">Record</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="o{,AzK|yJkA}8nM*`3+,"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1_section"></mutation><field
      name="doc_part_name">ATIA 4.1</field></block></value><statement name="conclusion"><block
      type="relationship_selector3" id="ru9twf/K)Rh5c2h2me,g"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="must_give_person_access_to_record" type1="government_institution"
      type2="person" type3="record"></mutation><field name="prefix1"></field><field
      name="prefix2">must give</field><field name="prefix3">access to</field><field
      name="postfix"></field><value name="parameter1"><block type="variable" id="L%|7V+esy|nZ|_B3T`8c"><field
      name="variable_name">GovInstitution</field></block></value><value name="parameter2"><block
      type="variable" id="F9~.@[`f14Z$vJ^CTG:f"><field name="variable_name">Person</field></block></value><value
      name="parameter3"><block type="variable" id="HxgpJNM0r)zym:#f9H^R"><field name="variable_name">Record</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_category(person).\nblawx_category_nlg(person,\"\",\"is
      a person\").\n:- dynamic person/1.\n#pred person(X) :: '@(X) is a person'.\n#pred
      holds(user,person,X) :: 'it is provided as a fact that @(X) is a person'.\n#pred
      holds(user,-person,X) :: 'it is provided as a fact that it is not the case that
      @(X) is a person'.\n#pred holds(Z,person,X) :: 'the conclusion in @(Z) that
      @(X) is a person holds'.\n#pred holds(Z,-person,X) :: 'the conclusion in @(Z)
      that it is not the case that @(X) is a person holds'.\n#pred according_to(Z,person,X)
      :: 'according to @(Z), @(X) is a person'.\n#pred according_to(Z,-person,X) ::
      'according to @(Z), it is not the case that @(X) is a person'.\n#pred blawx_defeated(Z,person,X)
      :: 'the conclusion in @(Z) that @(X) is a person is defeated'.\n#pred blawx_defeated(Z,-person,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a person is
      defeated'.\n#pred blawx_initially(person(X)) :: 'that @(X) is a person holds
      initially'.\n#pred blawx_initially(-person(X)) :: 'that it is not the case that
      @(X) is a person holds initially'.\n#pred blawx_ultimately(person(X)) :: 'that
      @(X) is a person holds ultimately'.\n#pred blawx_ultimately(-person(X)) :: 'that
      it is not the case that @(X) is a person holds ultimately'.\n#pred blawx_as_of(person(X),T)
      :: 'that @(X) is a person holds at @(T)'.\n#pred blawx_as_of(-person(X),T) ::
      'that it is not the case that @(X) is a person holds at @(T)'.\n#pred blawx_during(T1,person(X),T2)
      :: 'that @(X) is a person held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-person(X),T2)
      :: 'that it is not the case that @(X) is a person held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(person(X),T) :: 'that @(X) is a person became true at @(T)'.\n#pred
      blawx_becomes(-person(X),T) :: 'that it is not the case that @(X) is a person
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,person(X),End) :: '@(X)
      is a person remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-person(X),End)
      :: 'it is not the case that @(X) is a person remained the case between @(Start)
      and @(End)'.\nblawx_not_interrupted(datetime(Start),person(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-person(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),person(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-person(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),person(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-person(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),person(X),datetime(eot))
      :- blawx_initially(person(X)), blawx_ultimately(person(X)), findall(Time,blawx_becomes(-person(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-person(X),datetime(eot))
      :- blawx_initially(-person(X)), blawx_ultimately(-person(X)), findall(Time,blawx_becomes(person(X),datetime(Time)),[]).\nblawx_as_of(person(X),datetime(Time))
      :- blawx_initially(person(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),person(X),datetime(BeforeT)).\nblawx_as_of(person(X),datetime(Time))
      :- blawx_becomes(person(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),person(X),datetime(Time)).\nblawx_as_of(-person(X),datetime(Time))
      :- blawx_initially(-person(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-person(X),datetime(BeforeT)).\nblawx_as_of(-person(X),datetime(Time))
      :- blawx_becomes(-person(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-person(X),datetime(Time)).\nblawx_during(datetime(Start),person(X),datetime(End))
      :- blawx_becomes(person(X),datetime(Start)), blawx_becomes(-person(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),person(X),datetime(End)).\nblawx_during(datetime(bot),person(X),datetime(End))
      :- blawx_initially(person(X)), blawx_becomes(-person(X),datetime(End)), blawx_not_interrupted(datetime(bot),person(X),datetime(End)).\nblawx_during(datetime(Start),person(X),datetime(eot))
      :- blawx_ultimately(person(X)), blawx_becomes(-person(X),datetime(Start)), blawx_not_interrupted(datetime(Start),person(X),datetime(eot)).\nblawx_during(datetime(bot),person(X),datetime(eot))
      :- blawx_initially(person(X)), blawx_ultimately(person(X)), blawx_becomes(-person(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),person(X),datetime(eot)).\nblawx_during(datetime(Start),-person(X),datetime(End))
      :- blawx_becomes(-person(X),datetime(Start)), blawx_becomes(person(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-person(X),datetime(End)).\nblawx_during(datetime(bot),-person(X),datetime(End))
      :- blawx_initially(-person(X)), blawx_becomes(person(X),datetime(End)), blawx_not_interrupted(datetime(bot),-person(X),datetime(End)).\nblawx_during(datetime(Start),-person(X),datetime(eot))
      :- blawx_ultimately(-person(X)), blawx_becomes(person(X),datetime(Start)), blawx_not_interrupted(datetime(Start),-person(X),datetime(eot)).\nblawx_during(datetime(bot),-person(X),datetime(eot))
      :- blawx_initially(-person(X)), blawx_ultimately(-person(X)), blawx_becomes(-person(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-person(X),datetime(eot)).\nblawx_category(record).\nblawx_category_nlg(record,\"\",\"is
      a record\").\n:- dynamic record/1.\n#pred record(X) :: '@(X) is a record'.\n#pred
      holds(user,record,X) :: 'it is provided as a fact that @(X) is a record'.\n#pred
      holds(user,-record,X) :: 'it is provided as a fact that it is not the case that
      @(X) is a record'.\n#pred holds(Z,record,X) :: 'the conclusion in @(Z) that
      @(X) is a record holds'.\n#pred holds(Z,-record,X) :: 'the conclusion in @(Z)
      that it is not the case that @(X) is a record holds'.\n#pred according_to(Z,record,X)
      :: 'according to @(Z), @(X) is a record'.\n#pred according_to(Z,-record,X) ::
      'according to @(Z), it is not the case that @(X) is a record'.\n#pred blawx_defeated(Z,record,X)
      :: 'the conclusion in @(Z) that @(X) is a record is defeated'.\n#pred blawx_defeated(Z,-record,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a record is
      defeated'.\n#pred blawx_initially(record(X)) :: 'that @(X) is a record holds
      initially'.\n#pred blawx_initially(-record(X)) :: 'that it is not the case that
      @(X) is a record holds initially'.\n#pred blawx_ultimately(record(X)) :: 'that
      @(X) is a record holds ultimately'.\n#pred blawx_ultimately(-record(X)) :: 'that
      it is not the case that @(X) is a record holds ultimately'.\n#pred blawx_as_of(record(X),T)
      :: 'that @(X) is a record holds at @(T)'.\n#pred blawx_as_of(-record(X),T) ::
      'that it is not the case that @(X) is a record holds at @(T)'.\n#pred blawx_during(T1,record(X),T2)
      :: 'that @(X) is a record held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-record(X),T2)
      :: 'that it is not the case that @(X) is a record held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(record(X),T) :: 'that @(X) is a record became true at @(T)'.\n#pred
      blawx_becomes(-record(X),T) :: 'that it is not the case that @(X) is a record
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,record(X),End) :: '@(X)
      is a record remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-record(X),End)
      :: 'it is not the case that @(X) is a record remained the case between @(Start)
      and @(End)'.\nblawx_not_interrupted(datetime(Start),record(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-record(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-record(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(record(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),record(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-record(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-record(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(record(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),record(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-record(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-record(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(record(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),record(X),datetime(eot))
      :- blawx_initially(record(X)), blawx_ultimately(record(X)), findall(Time,blawx_becomes(-record(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-record(X),datetime(eot))
      :- blawx_initially(-record(X)), blawx_ultimately(-record(X)), findall(Time,blawx_becomes(record(X),datetime(Time)),[]).\nblawx_as_of(record(X),datetime(Time))
      :- blawx_initially(record(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),record(X),datetime(BeforeT)).\nblawx_as_of(record(X),datetime(Time))
      :- blawx_becomes(record(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),record(X),datetime(Time)).\nblawx_as_of(-record(X),datetime(Time))
      :- blawx_initially(-record(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-record(X),datetime(BeforeT)).\nblawx_as_of(-record(X),datetime(Time))
      :- blawx_becomes(-record(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-record(X),datetime(Time)).\nblawx_during(datetime(Start),record(X),datetime(End))
      :- blawx_becomes(record(X),datetime(Start)), blawx_becomes(-record(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),record(X),datetime(End)).\nblawx_during(datetime(bot),record(X),datetime(End))
      :- blawx_initially(record(X)), blawx_becomes(-record(X),datetime(End)), blawx_not_interrupted(datetime(bot),record(X),datetime(End)).\nblawx_during(datetime(Start),record(X),datetime(eot))
      :- blawx_ultimately(record(X)), blawx_becomes(-record(X),datetime(Start)), blawx_not_interrupted(datetime(Start),record(X),datetime(eot)).\nblawx_during(datetime(bot),record(X),datetime(eot))
      :- blawx_initially(record(X)), blawx_ultimately(record(X)), blawx_becomes(-record(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),record(X),datetime(eot)).\nblawx_during(datetime(Start),-record(X),datetime(End))
      :- blawx_becomes(-record(X),datetime(Start)), blawx_becomes(record(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-record(X),datetime(End)).\nblawx_during(datetime(bot),-record(X),datetime(End))
      :- blawx_initially(-record(X)), blawx_becomes(record(X),datetime(End)), blawx_not_interrupted(datetime(bot),-record(X),datetime(End)).\nblawx_during(datetime(Start),-record(X),datetime(eot))
      :- blawx_ultimately(-record(X)), blawx_becomes(record(X),datetime(Start)), blawx_not_interrupted(datetime(Start),-record(X),datetime(eot)).\nblawx_during(datetime(bot),-record(X),datetime(eot))
      :- blawx_initially(-record(X)), blawx_ultimately(-record(X)), blawx_becomes(-record(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-record(X),datetime(eot)).\nblawx_category(request).\nblawx_category_nlg(request,\"\",\"is
      a request\").\n:- dynamic request/1.\n#pred request(X) :: '@(X) is a request'.\n#pred
      holds(user,request,X) :: 'it is provided as a fact that @(X) is a request'.\n#pred
      holds(user,-request,X) :: 'it is provided as a fact that it is not the case
      that @(X) is a request'.\n#pred holds(Z,request,X) :: 'the conclusion in @(Z)
      that @(X) is a request holds'.\n#pred holds(Z,-request,X) :: 'the conclusion
      in @(Z) that it is not the case that @(X) is a request holds'.\n#pred according_to(Z,request,X)
      :: 'according to @(Z), @(X) is a request'.\n#pred according_to(Z,-request,X)
      :: 'according to @(Z), it is not the case that @(X) is a request'.\n#pred blawx_defeated(Z,request,X)
      :: 'the conclusion in @(Z) that @(X) is a request is defeated'.\n#pred blawx_defeated(Z,-request,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a request is
      defeated'.\n#pred blawx_initially(request(X)) :: 'that @(X) is a request holds
      initially'.\n#pred blawx_initially(-request(X)) :: 'that it is not the case
      that @(X) is a request holds initially'.\n#pred blawx_ultimately(request(X))
      :: 'that @(X) is a request holds ultimately'.\n#pred blawx_ultimately(-request(X))
      :: 'that it is not the case that @(X) is a request holds ultimately'.\n#pred
      blawx_as_of(request(X),T) :: 'that @(X) is a request holds at @(T)'.\n#pred
      blawx_as_of(-request(X),T) :: 'that it is not the case that @(X) is a request
      holds at @(T)'.\n#pred blawx_during(T1,request(X),T2) :: 'that @(X) is a request
      held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-request(X),T2) :: 'that
      it is not the case that @(X) is a request held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(request(X),T) :: 'that @(X) is a request became true at @(T)'.\n#pred
      blawx_becomes(-request(X),T) :: 'that it is not the case that @(X) is a request
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,request(X),End) ::
      '@(X) is a request remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-request(X),End)
      :: 'it is not the case that @(X) is a request remained the case between @(Start)
      and @(End)'.\nblawx_not_interrupted(datetime(Start),request(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-request(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-request(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(request(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),request(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-request(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-request(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(request(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),request(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-request(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-request(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(request(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),request(X),datetime(eot))
      :- blawx_initially(request(X)), blawx_ultimately(request(X)), findall(Time,blawx_becomes(-request(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-request(X),datetime(eot))
      :- blawx_initially(-request(X)), blawx_ultimately(-request(X)), findall(Time,blawx_becomes(request(X),datetime(Time)),[]).\nblawx_as_of(request(X),datetime(Time))
      :- blawx_initially(request(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),request(X),datetime(BeforeT)).\nblawx_as_of(request(X),datetime(Time))
      :- blawx_becomes(request(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),request(X),datetime(Time)).\nblawx_as_of(-request(X),datetime(Time))
      :- blawx_initially(-request(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-request(X),datetime(BeforeT)).\nblawx_as_of(-request(X),datetime(Time))
      :- blawx_becomes(-request(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-request(X),datetime(Time)).\nblawx_during(datetime(Start),request(X),datetime(End))
      :- blawx_becomes(request(X),datetime(Start)), blawx_becomes(-request(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),request(X),datetime(End)).\nblawx_during(datetime(bot),request(X),datetime(End))
      :- blawx_initially(request(X)), blawx_becomes(-request(X),datetime(End)), blawx_not_interrupted(datetime(bot),request(X),datetime(End)).\nblawx_during(datetime(Start),request(X),datetime(eot))
      :- blawx_ultimately(request(X)), blawx_becomes(-request(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),request(X),datetime(eot)).\nblawx_during(datetime(bot),request(X),datetime(eot))
      :- blawx_initially(request(X)), blawx_ultimately(request(X)), blawx_becomes(-request(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),request(X),datetime(eot)).\nblawx_during(datetime(Start),-request(X),datetime(End))
      :- blawx_becomes(-request(X),datetime(Start)), blawx_becomes(request(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-request(X),datetime(End)).\nblawx_during(datetime(bot),-request(X),datetime(End))
      :- blawx_initially(-request(X)), blawx_becomes(request(X),datetime(End)), blawx_not_interrupted(datetime(bot),-request(X),datetime(End)).\nblawx_during(datetime(Start),-request(X),datetime(eot))
      :- blawx_ultimately(-request(X)), blawx_becomes(request(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-request(X),datetime(eot)).\nblawx_during(datetime(bot),-request(X),datetime(eot))
      :- blawx_initially(-request(X)), blawx_ultimately(-request(X)), blawx_becomes(-request(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-request(X),datetime(eot)).\nblawx_category(information).\nblawx_category_nlg(information,\"\",\"is
      information\").\n:- dynamic information/1.\n#pred information(X) :: '@(X) is
      information'.\n#pred holds(user,information,X) :: 'it is provided as a fact
      that @(X) is information'.\n#pred holds(user,-information,X) :: 'it is provided
      as a fact that it is not the case that @(X) is information'.\n#pred holds(Z,information,X)
      :: 'the conclusion in @(Z) that @(X) is information holds'.\n#pred holds(Z,-information,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is information
      holds'.\n#pred according_to(Z,information,X) :: 'according to @(Z), @(X) is
      information'.\n#pred according_to(Z,-information,X) :: 'according to @(Z), it
      is not the case that @(X) is information'.\n#pred blawx_defeated(Z,information,X)
      :: 'the conclusion in @(Z) that @(X) is information is defeated'.\n#pred blawx_defeated(Z,-information,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is information
      is defeated'.\n#pred blawx_initially(information(X)) :: 'that @(X) is information
      holds initially'.\n#pred blawx_initially(-information(X)) :: 'that it is not
      the case that @(X) is information holds initially'.\n#pred blawx_ultimately(information(X))
      :: 'that @(X) is information holds ultimately'.\n#pred blawx_ultimately(-information(X))
      :: 'that it is not the case that @(X) is information holds ultimately'.\n#pred
      blawx_as_of(information(X),T) :: 'that @(X) is information holds at @(T)'.\n#pred
      blawx_as_of(-information(X),T) :: 'that it is not the case that @(X) is information
      holds at @(T)'.\n#pred blawx_during(T1,information(X),T2) :: 'that @(X) is information
      held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-information(X),T2) ::
      'that it is not the case that @(X) is information held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(information(X),T) :: 'that @(X) is information became true at
      @(T)'.\n#pred blawx_becomes(-information(X),T) :: 'that it is not the case that
      @(X) is information became true at @(T)'.\n#pred blawx_not_interrupted(Start,information(X),End)
      :: '@(X) is information remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-information(X),End) :: 'it is not the case that
      @(X) is information remained the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),information(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-information(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-information(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(information(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),information(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-information(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-information(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(information(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),information(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-information(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-information(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(information(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),information(X),datetime(eot))
      :- blawx_initially(information(X)), blawx_ultimately(information(X)), findall(Time,blawx_becomes(-information(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-information(X),datetime(eot))
      :- blawx_initially(-information(X)), blawx_ultimately(-information(X)), findall(Time,blawx_becomes(information(X),datetime(Time)),[]).\nblawx_as_of(information(X),datetime(Time))
      :- blawx_initially(information(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),information(X),datetime(BeforeT)).\nblawx_as_of(information(X),datetime(Time))
      :- blawx_becomes(information(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),information(X),datetime(Time)).\nblawx_as_of(-information(X),datetime(Time))
      :- blawx_initially(-information(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-information(X),datetime(BeforeT)).\nblawx_as_of(-information(X),datetime(Time))
      :- blawx_becomes(-information(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-information(X),datetime(Time)).\nblawx_during(datetime(Start),information(X),datetime(End))
      :- blawx_becomes(information(X),datetime(Start)), blawx_becomes(-information(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),information(X),datetime(End)).\nblawx_during(datetime(bot),information(X),datetime(End))
      :- blawx_initially(information(X)), blawx_becomes(-information(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),information(X),datetime(End)).\nblawx_during(datetime(Start),information(X),datetime(eot))
      :- blawx_ultimately(information(X)), blawx_becomes(-information(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),information(X),datetime(eot)).\nblawx_during(datetime(bot),information(X),datetime(eot))
      :- blawx_initially(information(X)), blawx_ultimately(information(X)), blawx_becomes(-information(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),information(X),datetime(eot)).\nblawx_during(datetime(Start),-information(X),datetime(End))
      :- blawx_becomes(-information(X),datetime(Start)), blawx_becomes(information(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-information(X),datetime(End)).\nblawx_during(datetime(bot),-information(X),datetime(End))
      :- blawx_initially(-information(X)), blawx_becomes(information(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-information(X),datetime(End)).\nblawx_during(datetime(Start),-information(X),datetime(eot))
      :- blawx_ultimately(-information(X)), blawx_becomes(information(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-information(X),datetime(eot)).\nblawx_during(datetime(bot),-information(X),datetime(eot))
      :- blawx_initially(-information(X)), blawx_ultimately(-information(X)), blawx_becomes(-information(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-information(X),datetime(eot)).\nblawx_category(government_institution).\nblawx_category_nlg(government_institution,\"\",\"is
      a government institution\").\n:- dynamic government_institution/1.\n#pred government_institution(X)
      :: '@(X) is a government institution'.\n#pred holds(user,government_institution,X)
      :: 'it is provided as a fact that @(X) is a government institution'.\n#pred
      holds(user,-government_institution,X) :: 'it is provided as a fact that it is
      not the case that @(X) is a government institution'.\n#pred holds(Z,government_institution,X)
      :: 'the conclusion in @(Z) that @(X) is a government institution holds'.\n#pred
      holds(Z,-government_institution,X) :: 'the conclusion in @(Z) that it is not
      the case that @(X) is a government institution holds'.\n#pred according_to(Z,government_institution,X)
      :: 'according to @(Z), @(X) is a government institution'.\n#pred according_to(Z,-government_institution,X)
      :: 'according to @(Z), it is not the case that @(X) is a government institution'.\n#pred
      blawx_defeated(Z,government_institution,X) :: 'the conclusion in @(Z) that @(X)
      is a government institution is defeated'.\n#pred blawx_defeated(Z,-government_institution,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a government
      institution is defeated'.\n#pred blawx_initially(government_institution(X))
      :: 'that @(X) is a government institution holds initially'.\n#pred blawx_initially(-government_institution(X))
      :: 'that it is not the case that @(X) is a government institution holds initially'.\n#pred
      blawx_ultimately(government_institution(X)) :: 'that @(X) is a government institution
      holds ultimately'.\n#pred blawx_ultimately(-government_institution(X)) :: 'that
      it is not the case that @(X) is a government institution holds ultimately'.\n#pred
      blawx_as_of(government_institution(X),T) :: 'that @(X) is a government institution
      holds at @(T)'.\n#pred blawx_as_of(-government_institution(X),T) :: 'that it
      is not the case that @(X) is a government institution holds at @(T)'.\n#pred
      blawx_during(T1,government_institution(X),T2) :: 'that @(X) is a government
      institution held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-government_institution(X),T2)
      :: 'that it is not the case that @(X) is a government institution held between
      @(T1) and @(T2)'.\n#pred blawx_becomes(government_institution(X),T) :: 'that
      @(X) is a government institution became true at @(T)'.\n#pred blawx_becomes(-government_institution(X),T)
      :: 'that it is not the case that @(X) is a government institution became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,government_institution(X),End)
      :: '@(X) is a government institution remained the case between @(Start) and
      @(End)'.\n#pred blawx_not_interrupted(Start,-government_institution(X),End)
      :: 'it is not the case that @(X) is a government institution remained the case
      between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),government_institution(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-government_institution(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-government_institution(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(government_institution(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),government_institution(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-government_institution(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-government_institution(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(government_institution(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),government_institution(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-government_institution(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-government_institution(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(government_institution(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),government_institution(X),datetime(eot))
      :- blawx_initially(government_institution(X)), blawx_ultimately(government_institution(X)),
      findall(Time,blawx_becomes(-government_institution(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-government_institution(X),datetime(eot))
      :- blawx_initially(-government_institution(X)), blawx_ultimately(-government_institution(X)),
      findall(Time,blawx_becomes(government_institution(X),datetime(Time)),[]).\nblawx_as_of(government_institution(X),datetime(Time))
      :- blawx_initially(government_institution(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),government_institution(X),datetime(BeforeT)).\nblawx_as_of(government_institution(X),datetime(Time))
      :- blawx_becomes(government_institution(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),government_institution(X),datetime(Time)).\nblawx_as_of(-government_institution(X),datetime(Time))
      :- blawx_initially(-government_institution(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-government_institution(X),datetime(BeforeT)).\nblawx_as_of(-government_institution(X),datetime(Time))
      :- blawx_becomes(-government_institution(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-government_institution(X),datetime(Time)).\nblawx_during(datetime(Start),government_institution(X),datetime(End))
      :- blawx_becomes(government_institution(X),datetime(Start)), blawx_becomes(-government_institution(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),government_institution(X),datetime(End)).\nblawx_during(datetime(bot),government_institution(X),datetime(End))
      :- blawx_initially(government_institution(X)), blawx_becomes(-government_institution(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),government_institution(X),datetime(End)).\nblawx_during(datetime(Start),government_institution(X),datetime(eot))
      :- blawx_ultimately(government_institution(X)), blawx_becomes(-government_institution(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),government_institution(X),datetime(eot)).\nblawx_during(datetime(bot),government_institution(X),datetime(eot))
      :- blawx_initially(government_institution(X)), blawx_ultimately(government_institution(X)),
      blawx_becomes(-government_institution(X),datetime(Start)), blawx_not_interrupted(datetime(bot),government_institution(X),datetime(eot)).\nblawx_during(datetime(Start),-government_institution(X),datetime(End))
      :- blawx_becomes(-government_institution(X),datetime(Start)), blawx_becomes(government_institution(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-government_institution(X),datetime(End)).\nblawx_during(datetime(bot),-government_institution(X),datetime(End))
      :- blawx_initially(-government_institution(X)), blawx_becomes(government_institution(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-government_institution(X),datetime(End)).\nblawx_during(datetime(Start),-government_institution(X),datetime(eot))
      :- blawx_ultimately(-government_institution(X)), blawx_becomes(government_institution(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-government_institution(X),datetime(eot)).\nblawx_during(datetime(bot),-government_institution(X),datetime(eot))
      :- blawx_initially(-government_institution(X)), blawx_ultimately(-government_institution(X)),
      blawx_becomes(-government_institution(X),datetime(Start)), blawx_not_interrupted(datetime(bot),-government_institution(X),datetime(eot)).\n\nblawx_attribute(person,has_a_right_to_access_record,record).\nblawx_attribute_nlg(has_a_right_to_access_record,ov,\"\",\"has
      a right to access\",\"\").\n:- dynamic has_a_right_to_access_record/2.\n#pred
      has_a_right_to_access_record(X,Y) :: '@(X) has a right to access @(Y)'.\n#pred
      holds(user,has_a_right_to_access_record,X,Y) :: 'it is provided as a fact that
      @(X) has a right to access @(Y)'.\n#pred holds(user,-has_a_right_to_access_record,X,Y)
      :: 'it is provided as a fact that it is not the case that @(X) has a right to
      access @(Y)'.\n#pred holds(Z,has_a_right_to_access_record,X,Y) :: 'the conclusion
      in @(Z) that @(X) has a right to access @(Y) holds'.\n#pred holds(Z,-has_a_right_to_access_record,X,Y)
      :: 'the conclusion in @(Z) that it is not the case that @(X) has a right to
      access @(Y) holds'.\n#pred according_to(Z,has_a_right_to_access_record,X,Y)
      :: 'according to @(Z), @(X) has a right to access @(Y)'.\n#pred according_to(Z,-has_a_right_to_access_record,X,Y)
      :: 'according to @(Z), it is not the case that @(X) has a right to access @(Y)'.\n#pred
      blawx_defeated(Z,has_a_right_to_access_record,X,Y) :: 'the conclusion in @(Z)
      that @(X) has a right to access @(Y) is defeated'.\n#pred blawx_defeated(Z,-has_a_right_to_access_record,X,Y)
      :: 'the conclusion in @(Z) that @(X) has a right to access @(Y) is defeated'.\n#pred
      blawx_initially(has_a_right_to_access_record(X,Y)) :: 'that @(X) has a right
      to access @(Y) holds initially'.\n#pred blawx_initially(-has_a_right_to_access_record(X,Y))
      :: 'that it is not the case that @(X) has a right to access @(Y) holds initially'.\n#pred
      blawx_ultimately(has_a_right_to_access_record(X,Y)) :: 'that @(X) has a right
      to access @(Y) holds ultimately'.\n#pred blawx_ultimately(-has_a_right_to_access_record(X,Y))
      :: 'that it is not the case that @(X) has a right to access @(Y) holds ultimately'.\n#pred
      blawx_as_of(has_a_right_to_access_record(X,Y),T) :: 'that @(X) has a right to
      access @(Y) holds at @(T)'.\n#pred blawx_as_of(-has_a_right_to_access_record(X,Y),T)
      :: 'that it is not the case that @(X) has a right to access @(Y) holds at @(T)'.\n#pred
      blawx_during(T1,has_a_right_to_access_record(X,Y),T2) :: 'that @(X) has a right
      to access @(Y) held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-has_a_right_to_access_record(X,Y),T2)
      :: 'that it is not the case that @(X) has a right to access @(Y) held between
      @(T1) and @(T2)'.\n#pred blawx_becomes(has_a_right_to_access_record(X,Y),T)
      :: 'that @(X) has a right to access @(Y) became true at @(T)'.\n#pred blawx_becomes(-has_a_right_to_access_record(X,Y),T)
      :: 'that it is not the case that @(X) has a right to access @(Y) became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,has_a_right_to_access_record(X,Y),End)
      :: '@(X) has a right to access @(Y) remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-has_a_right_to_access_record(X,Y),End) :: 'it is
      not the case that @(X) has a right to access @(Y) remained the case between
      @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),has_a_right_to_access_record(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),has_a_right_to_access_record(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),has_a_right_to_access_record(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_initially(has_a_right_to_access_record(X,Y)), blawx_ultimately(has_a_right_to_access_record(X,Y)),
      findall(Time,blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_initially(-has_a_right_to_access_record(X,Y)), blawx_ultimately(-has_a_right_to_access_record(X,Y)),
      findall(Time,blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Time)),[]).\nblawx_as_of(has_a_right_to_access_record(X,Y),datetime(Time))
      :- blawx_initially(has_a_right_to_access_record(X,Y)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),has_a_right_to_access_record(X,Y),datetime(BeforeT)).\nblawx_as_of(has_a_right_to_access_record(X,Y),datetime(Time))
      :- blawx_becomes(has_a_right_to_access_record(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),has_a_right_to_access_record(X,Y),datetime(Time)).\nblawx_as_of(-has_a_right_to_access_record(X,Y),datetime(Time))
      :- blawx_initially(-has_a_right_to_access_record(X,Y)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(BeforeT)).\nblawx_as_of(-has_a_right_to_access_record(X,Y),datetime(Time))
      :- blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-has_a_right_to_access_record(X,Y),datetime(Time)).\nblawx_during(datetime(Start),has_a_right_to_access_record(X,Y),datetime(End))
      :- blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Start)), blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),has_a_right_to_access_record(X,Y),datetime(End)).\nblawx_during(datetime(bot),has_a_right_to_access_record(X,Y),datetime(End))
      :- blawx_initially(has_a_right_to_access_record(X,Y)), blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),has_a_right_to_access_record(X,Y),datetime(End)).\nblawx_during(datetime(Start),has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_ultimately(has_a_right_to_access_record(X,Y)), blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),has_a_right_to_access_record(X,Y),datetime(eot)).\nblawx_during(datetime(bot),has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_initially(has_a_right_to_access_record(X,Y)), blawx_ultimately(has_a_right_to_access_record(X,Y)),
      blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Start)), blawx_not_interrupted(datetime(bot),has_a_right_to_access_record(X,Y),datetime(eot)).\nblawx_during(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(End))
      :- blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Start)), blawx_becomes(has_a_right_to_access_record(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(End)).\nblawx_during(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(End))
      :- blawx_initially(-has_a_right_to_access_record(X,Y)), blawx_becomes(has_a_right_to_access_record(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(End)).\nblawx_during(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_ultimately(-has_a_right_to_access_record(X,Y)), blawx_becomes(has_a_right_to_access_record(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-has_a_right_to_access_record(X,Y),datetime(eot)).\nblawx_during(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(eot))
      :- blawx_initially(-has_a_right_to_access_record(X,Y)), blawx_ultimately(-has_a_right_to_access_record(X,Y)),
      blawx_becomes(-has_a_right_to_access_record(X,Y),datetime(Start)), blawx_not_interrupted(datetime(bot),-has_a_right_to_access_record(X,Y),datetime(eot)).\nblawx_attribute(record,under_the_control_of_government_institution,government_institution).\nblawx_attribute_nlg(under_the_control_of_government_institution,ov,\"\",\"is
      under the control of\",\"\").\n:- dynamic under_the_control_of_government_institution/2.\n#pred
      under_the_control_of_government_institution(X,Y) :: '@(X) is under the control
      of @(Y)'.\n#pred holds(user,under_the_control_of_government_institution,X,Y)
      :: 'it is provided as a fact that @(X) is under the control of @(Y)'.\n#pred
      holds(user,-under_the_control_of_government_institution,X,Y) :: 'it is provided
      as a fact that it is not the case that @(X) is under the control of @(Y)'.\n#pred
      holds(Z,under_the_control_of_government_institution,X,Y) :: 'the conclusion
      in @(Z) that @(X) is under the control of @(Y) holds'.\n#pred holds(Z,-under_the_control_of_government_institution,X,Y)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is under the control
      of @(Y) holds'.\n#pred according_to(Z,under_the_control_of_government_institution,X,Y)
      :: 'according to @(Z), @(X) is under the control of @(Y)'.\n#pred according_to(Z,-under_the_control_of_government_institution,X,Y)
      :: 'according to @(Z), it is not the case that @(X) is under the control of
      @(Y)'.\n#pred blawx_defeated(Z,under_the_control_of_government_institution,X,Y)
      :: 'the conclusion in @(Z) that @(X) is under the control of @(Y) is defeated'.\n#pred
      blawx_defeated(Z,-under_the_control_of_government_institution,X,Y) :: 'the conclusion
      in @(Z) that @(X) is under the control of @(Y) is defeated'.\n#pred blawx_initially(under_the_control_of_government_institution(X,Y))
      :: 'that @(X) is under the control of @(Y) holds initially'.\n#pred blawx_initially(-under_the_control_of_government_institution(X,Y))
      :: 'that it is not the case that @(X) is under the control of @(Y) holds initially'.\n#pred
      blawx_ultimately(under_the_control_of_government_institution(X,Y)) :: 'that
      @(X) is under the control of @(Y) holds ultimately'.\n#pred blawx_ultimately(-under_the_control_of_government_institution(X,Y))
      :: 'that it is not the case that @(X) is under the control of @(Y) holds ultimately'.\n#pred
      blawx_as_of(under_the_control_of_government_institution(X,Y),T) :: 'that @(X)
      is under the control of @(Y) holds at @(T)'.\n#pred blawx_as_of(-under_the_control_of_government_institution(X,Y),T)
      :: 'that it is not the case that @(X) is under the control of @(Y) holds at
      @(T)'.\n#pred blawx_during(T1,under_the_control_of_government_institution(X,Y),T2)
      :: 'that @(X) is under the control of @(Y) held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-under_the_control_of_government_institution(X,Y),T2) :: 'that
      it is not the case that @(X) is under the control of @(Y) held between @(T1)
      and @(T2)'.\n#pred blawx_becomes(under_the_control_of_government_institution(X,Y),T)
      :: 'that @(X) is under the control of @(Y) became true at @(T)'.\n#pred blawx_becomes(-under_the_control_of_government_institution(X,Y),T)
      :: 'that it is not the case that @(X) is under the control of @(Y) became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,under_the_control_of_government_institution(X,Y),End)
      :: '@(X) is under the control of @(Y) remained the case between @(Start) and
      @(End)'.\n#pred blawx_not_interrupted(Start,-under_the_control_of_government_institution(X,Y),End)
      :: 'it is not the case that @(X) is under the control of @(Y) remained the case
      between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_initially(under_the_control_of_government_institution(X,Y)), blawx_ultimately(under_the_control_of_government_institution(X,Y)),
      findall(Time,blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_initially(-under_the_control_of_government_institution(X,Y)), blawx_ultimately(-under_the_control_of_government_institution(X,Y)),
      findall(Time,blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Time)),[]).\nblawx_as_of(under_the_control_of_government_institution(X,Y),datetime(Time))
      :- blawx_initially(under_the_control_of_government_institution(X,Y)), BeforeT
      #< Time,blawx_not_interrupted(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(BeforeT)).\nblawx_as_of(under_the_control_of_government_institution(X,Y),datetime(Time))
      :- blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),under_the_control_of_government_institution(X,Y),datetime(Time)).\nblawx_as_of(-under_the_control_of_government_institution(X,Y),datetime(Time))
      :- blawx_initially(-under_the_control_of_government_institution(X,Y)), BeforeT
      #< Time,blawx_not_interrupted(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(BeforeT)).\nblawx_as_of(-under_the_control_of_government_institution(X,Y),datetime(Time))
      :- blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-under_the_control_of_government_institution(X,Y),datetime(Time)).\nblawx_during(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(End))
      :- blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(End)).\nblawx_during(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(End))
      :- blawx_initially(under_the_control_of_government_institution(X,Y)), blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(End)).\nblawx_during(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_ultimately(under_the_control_of_government_institution(X,Y)), blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),under_the_control_of_government_institution(X,Y),datetime(eot)).\nblawx_during(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_initially(under_the_control_of_government_institution(X,Y)), blawx_ultimately(under_the_control_of_government_institution(X,Y)),
      blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),under_the_control_of_government_institution(X,Y),datetime(eot)).\nblawx_during(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(End))
      :- blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(End)).\nblawx_during(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(End))
      :- blawx_initially(-under_the_control_of_government_institution(X,Y)), blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(End)).\nblawx_during(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_ultimately(-under_the_control_of_government_institution(X,Y)), blawx_becomes(under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-under_the_control_of_government_institution(X,Y),datetime(eot)).\nblawx_during(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(eot))
      :- blawx_initially(-under_the_control_of_government_institution(X,Y)), blawx_ultimately(-under_the_control_of_government_institution(X,Y)),
      blawx_becomes(-under_the_control_of_government_institution(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-under_the_control_of_government_institution(X,Y),datetime(eot)).\nblawx_relationship(submitted_request_for_record_to_governent_institution,person,request,government_institution,record).\nblawx_relationship_nlg(submitted_request_for_record_to_governent_institution,\"\",\"submitted\",\"to
      institution\",\"requesting access to\",\"\").\n:- dynamic submitted_request_for_record_to_governent_institution/4.\n#pred
      submitted_request_for_record_to_governent_institution(A,B,C,D) :: '@(A) submitted
      @(B) to institution @(C) requesting access to @(D)'.\n#pred holds(user,submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'it is provided as a fact that @(A) submitted @(B) to institution @(C) requesting
      access to @(D)'.\n#pred holds(user,-submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'it is provided as a fact that it is not the case that @(A) submitted @(B)
      to institution @(C) requesting access to @(D)'.\n#pred holds(Z,submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'the conclusion in @(Z) that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) holds'.\n#pred holds(Z,-submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'the conclusion in @(Z) that it is not the case that @(A) submitted @(B)
      to institution @(C) requesting access to @(D) holds'.\n#pred according_to(Z,submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'according to @(Z), @(A) submitted @(B) to institution @(C) requesting access
      to @(D)'.\n#pred according_to(Z,-submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'according to @(Z), it is not the case that @(A) submitted @(B) to institution
      @(C) requesting access to @(D)'.\n#pred blawx_defeated(Z,submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'the conclusion in @(Z) that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) is defeated'.\n#pred blawx_defeated(Z,-submitted_request_for_record_to_governent_institution,A,B,C,D)
      :: 'the conclusion in @(Z) that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) is defeated'.\n#pred blawx_initially(submitted_request_for_record_to_governent_institution(A,B,C,D))
      :: 'that @(A) submitted @(B) to institution @(C) requesting access to @(D) holds
      initially'.\n#pred blawx_initially(-submitted_request_for_record_to_governent_institution(A,B,C,D))
      :: 'that it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) holds initially'.\n#pred blawx_ultimately(submitted_request_for_record_to_governent_institution(A,B,C,D))
      :: 'that @(A) submitted @(B) to institution @(C) requesting access to @(D) holds
      ultimately'.\n#pred blawx_ultimately(-submitted_request_for_record_to_governent_institution(A,B,C,D))
      :: 'that it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) holds ultimately'.\n#pred blawx_as_of(submitted_request_for_record_to_governent_institution(A,B,C,D),T)
      :: 'that @(A) submitted @(B) to institution @(C) requesting access to @(D) holds
      at @(T)'.\n#pred blawx_as_of(-submitted_request_for_record_to_governent_institution(A,B,C,D),T)
      :: 'that it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) holds at @(T)'.\n#pred blawx_during(T1,submitted_request_for_record_to_governent_institution(A,B,C,D),T2)
      :: 'that @(A) submitted @(B) to institution @(C) requesting access to @(D) held
      between @(T1) and @(T2)'.\n#pred blawx_during(T1,-submitted_request_for_record_to_governent_institution(A,B,C,D),T2)
      :: 'that it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) held between @(T1) and @(T2)'.\n#pred blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),T)
      :: 'that @(A) submitted @(B) to institution @(C) requesting access to @(D) became
      true at @(T)'.\n#pred blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),T)
      :: 'that it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) became true at @(T)'.\n#pred blawx_not_interrupted(Start,submitted_request_for_record_to_governent_institution(A,B,C,D),End)
      :: '@(A) submitted @(B) to institution @(C) requesting access to @(D) remained
      the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-submitted_request_for_record_to_governent_institution(A,B,C,D),End)
      :: 'it is not the case that @(A) submitted @(B) to institution @(C) requesting
      access to @(D) remained the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_initially(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_ultimately(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      findall(Time,blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_initially(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_ultimately(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      findall(Time,blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)),[]).\nblawx_as_of(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time))
      :- blawx_initially(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      BeforeT #< Time,blawx_not_interrupted(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(BeforeT)).\nblawx_as_of(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time))
      :- blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)).\nblawx_as_of(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time))
      :- blawx_initially(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      BeforeT #< Time,blawx_not_interrupted(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(BeforeT)).\nblawx_as_of(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time))
      :- blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Time)).\nblawx_during(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)).\nblawx_during(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- blawx_initially(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)),
      blawx_not_interrupted(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)).\nblawx_during(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_ultimately(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_not_interrupted(datetime(Start),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot)).\nblawx_during(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_initially(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_ultimately(submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_not_interrupted(datetime(bot),submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot)).\nblawx_during(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)).\nblawx_during(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End))
      :- blawx_initially(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)),
      blawx_not_interrupted(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(End)).\nblawx_during(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_ultimately(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot)).\nblawx_during(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot))
      :- blawx_initially(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_ultimately(-submitted_request_for_record_to_governent_institution(A,B,C,D)),
      blawx_becomes(-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-submitted_request_for_record_to_governent_institution(A,B,C,D),datetime(eot)).\nblawx_relationship(must_give_person_access_to_record,government_institution,person,record).\nblawx_relationship_nlg(must_give_person_access_to_record,\"\",\"must
      give\",\"access to\",\"\").\n:- dynamic must_give_person_access_to_record/3.\n#pred
      must_give_person_access_to_record(A,B,C) :: '@(A) must give @(B) access to @(C)'.\n#pred
      holds(user,must_give_person_access_to_record,A,B,C) :: 'it is provided as a
      fact that @(A) must give @(B) access to @(C)'.\n#pred holds(user,-must_give_person_access_to_record,A,B,C)
      :: 'it is provided as a fact that it is not the case that @(A) must give @(B)
      access to @(C)'.\n#pred holds(Z,must_give_person_access_to_record,A,B,C) ::
      'the conclusion in @(Z) that @(A) must give @(B) access to @(C) holds'.\n#pred
      holds(Z,-must_give_person_access_to_record,A,B,C) :: 'the conclusion in @(Z)
      that it is not the case that @(A) must give @(B) access to @(C) holds'.\n#pred
      according_to(Z,must_give_person_access_to_record,A,B,C) :: 'according to @(Z),
      @(A) must give @(B) access to @(C)'.\n#pred according_to(Z,-must_give_person_access_to_record,A,B,C)
      :: 'according to @(Z), it is not the case that @(A) must give @(B) access to
      @(C)'.\n#pred blawx_defeated(Z,must_give_person_access_to_record,A,B,C) :: 'the
      conclusion in @(Z) that @(A) must give @(B) access to @(C) is defeated'.\n#pred
      blawx_defeated(Z,-must_give_person_access_to_record,A,B,C) :: 'the conclusion
      in @(Z) that @(A) must give @(B) access to @(C) is defeated'.\n#pred blawx_initially(must_give_person_access_to_record(A,B,C))
      :: 'that @(A) must give @(B) access to @(C) holds initially'.\n#pred blawx_initially(-must_give_person_access_to_record(A,B,C))
      :: 'that it is not the case that @(A) must give @(B) access to @(C) holds initially'.\n#pred
      blawx_ultimately(must_give_person_access_to_record(A,B,C)) :: 'that @(A) must
      give @(B) access to @(C) holds ultimately'.\n#pred blawx_ultimately(-must_give_person_access_to_record(A,B,C))
      :: 'that it is not the case that @(A) must give @(B) access to @(C) holds ultimately'.\n#pred
      blawx_as_of(must_give_person_access_to_record(A,B,C),T) :: 'that @(A) must give
      @(B) access to @(C) holds at @(T)'.\n#pred blawx_as_of(-must_give_person_access_to_record(A,B,C),T)
      :: 'that it is not the case that @(A) must give @(B) access to @(C) holds at
      @(T)'.\n#pred blawx_during(T1,must_give_person_access_to_record(A,B,C),T2) ::
      'that @(A) must give @(B) access to @(C) held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-must_give_person_access_to_record(A,B,C),T2) :: 'that it is
      not the case that @(A) must give @(B) access to @(C) held between @(T1) and
      @(T2)'.\n#pred blawx_becomes(must_give_person_access_to_record(A,B,C),T) ::
      'that @(A) must give @(B) access to @(C) became true at @(T)'.\n#pred blawx_becomes(-must_give_person_access_to_record(A,B,C),T)
      :: 'that it is not the case that @(A) must give @(B) access to @(C) became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,must_give_person_access_to_record(A,B,C),End)
      :: '@(A) must give @(B) access to @(C) remained the case between @(Start) and
      @(End)'.\n#pred blawx_not_interrupted(Start,-must_give_person_access_to_record(A,B,C),End)
      :: 'it is not the case that @(A) must give @(B) access to @(C) remained the
      case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_initially(must_give_person_access_to_record(A,B,C)), blawx_ultimately(must_give_person_access_to_record(A,B,C)),
      findall(Time,blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_initially(-must_give_person_access_to_record(A,B,C)), blawx_ultimately(-must_give_person_access_to_record(A,B,C)),
      findall(Time,blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Time)),[]).\nblawx_as_of(must_give_person_access_to_record(A,B,C),datetime(Time))
      :- blawx_initially(must_give_person_access_to_record(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(BeforeT)).\nblawx_as_of(must_give_person_access_to_record(A,B,C),datetime(Time))
      :- blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),must_give_person_access_to_record(A,B,C),datetime(Time)).\nblawx_as_of(-must_give_person_access_to_record(A,B,C),datetime(Time))
      :- blawx_initially(-must_give_person_access_to_record(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(BeforeT)).\nblawx_as_of(-must_give_person_access_to_record(A,B,C),datetime(Time))
      :- blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-must_give_person_access_to_record(A,B,C),datetime(Time)).\nblawx_during(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(End))
      :- blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Start)),
      blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(End)), Start
      #< End, blawx_not_interrupted(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(End)).\nblawx_during(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(End))
      :- blawx_initially(must_give_person_access_to_record(A,B,C)), blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(End)).\nblawx_during(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_ultimately(must_give_person_access_to_record(A,B,C)), blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),must_give_person_access_to_record(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_initially(must_give_person_access_to_record(A,B,C)), blawx_ultimately(must_give_person_access_to_record(A,B,C)),
      blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),must_give_person_access_to_record(A,B,C),datetime(eot)).\nblawx_during(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(End))
      :- blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Start)),
      blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(End)), Start
      #< End, blawx_not_interrupted(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(End)).\nblawx_during(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(End))
      :- blawx_initially(-must_give_person_access_to_record(A,B,C)), blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(End)).\nblawx_during(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_ultimately(-must_give_person_access_to_record(A,B,C)), blawx_becomes(must_give_person_access_to_record(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-must_give_person_access_to_record(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(eot))
      :- blawx_initially(-must_give_person_access_to_record(A,B,C)), blawx_ultimately(-must_give_person_access_to_record(A,B,C)),
      blawx_becomes(-must_give_person_access_to_record(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),-must_give_person_access_to_record(A,B,C),datetime(eot)).\n\naccording_to(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record)
      :- person(Person),\ngovernment_institution(GovInstitution),\nrecord(Record),\nmeets_4_1_requirement(Person),\nunder_the_control_of_government_institution(Record,GovInstitution).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record)
      :- according_to(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record),
      not blawx_defeated(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record).\n\n%
      BLAWX CHECK DUPLICATES\n  has_a_right_to_access_record(Person,Record) :- holds(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record).\n\naccording_to(sec_4__subsec_1_section,must_give_person_access_to_record,GovInstitution,Person,Record)
      :- person(Person),\ngovernment_institution(GovInstitution),\nrecord(Record),\nrequest(Request),\nmeets_4_1_requirement(Person),\nunder_the_control_of_government_institution(Record,GovInstitution),\nsubmitted_request_for_record_to_governent_institution(Person,Request,GovInstitution,Record).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_1_section,must_give_person_access_to_record,GovInstitution,Person,Record)
      :- according_to(sec_4__subsec_1_section,must_give_person_access_to_record,GovInstitution,Person,Record),
      not blawx_defeated(sec_4__subsec_1_section,must_give_person_access_to_record,GovInstitution,Person,Record).\n\n%
      BLAWX CHECK DUPLICATES\n  must_give_person_access_to_record(GovInstitution,Person,Record)
      :- holds(sec_4__subsec_1_section,must_give_person_access_to_record,GovInstitution,Person,Record)."
- model: blawx.workspace
  pk: 4
  fields:
    ruledoc: 1
    workspace_name: sec_4__subsec_1__para_a_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="IWhO(BxtnF+TT{P8:Oh+" x="-4" y="33"><statement name="statements"><block
      type="new_attribute_declaration" id="MRyeIv72?5luCr7`sP=:"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="boolean" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">canadian_citizen</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix"></field><field name="second_element">value</field><field
      name="postfix">is a Canadian citizen</field><next><block type="new_attribute_declaration"
      id="N+t)J@%HmKR6t3!7vi5k"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="boolean" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">meets_4_1_requirement</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix"></field><field name="second_element">value</field><field
      name="postfix">is a person listed in subsection 4(1)</field></block></next></block></statement></block><block
      type="attributed_rule" id="eh_SzQLPCx$$xV#Wi2,k" x="-7" y="250"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="A]+x{X]?tnwM[g4XBfaK"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="Z0|]inn65];_@72LRl@G"><field name="variable_name">Person</field></block></value><next><block
      type="unary_attribute_selector" id=".qeUa@[X9bSy2Vss?]2H"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="canadian_citizen" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is a Canadian citizen</field><value name="first_element"><block
      type="variable" id="gjQiVQ#sIr[,H0|jED?4"><field name="variable_name">Person</field></block></value><next><block
      type="default_negation" id=";{,tkhf7.,I):I)=0p+e"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="gCXuqw|re#V+}0{LU#Q4"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="permanent_resident" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a permanent resident within the
      meaning of subsection 2(1) of the Immigration and Refugee Protection Act</field><value
      name="first_element"><block type="variable" id="lV]iQYbu#lSja7KLgcx|"><field
      name="variable_name">Person</field></block></value></block></statement></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="g?}=^rJb(?ot?{F]gzst"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_a_section"></mutation><field
      name="doc_part_name">ATIA 4.1.a</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="%,md2$ZgH7?T06kXHp?+"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_4_1_requirement" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a person listed in subsection
      4(1)</field><value name="first_element"><block type="variable" id="U2$(+agHlEXkN]o*We~2"><field
      name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_attribute(person,canadian_citizen,boolean).\nblawx_attribute_nlg(canadian_citizen,not_applicable,\"\",not_applicable,\"is
      a Canadian citizen\").\n:- dynamic canadian_citizen/1.\n#pred canadian_citizen(X)
      :: '@(X) is a Canadian citizen'.\n#pred holds(user,canadian_citizen,X) :: 'it
      is provided as a fact that @(X) is a Canadian citizen'.\n#pred holds(user,-canadian_citizen,X)
      :: 'it is provided as a fact that it is not the case that @(X) is a Canadian
      citizen'.\n#pred holds(Z,canadian_citizen,X) :: 'the conclusion in @(Z) that
      @(X) is a Canadian citizen holds'.\n#pred holds(Z,-canadian_citizen,X) :: 'the
      conclusion in @(Z) that it is not the case that @(X) is a Canadian citizen holds'.\n#pred
      according_to(Z,canadian_citizen,X) :: 'according to @(Z), @(X) is a Canadian
      citizen'.\n#pred according_to(Z,-canadian_citizen,X) :: 'according to @(Z),
      it is not the case that @(X) is a Canadian citizen'.\n#pred blawx_defeated(Z,canadian_citizen,X)
      :: 'the conclusion in @(Z) that @(X) is a Canadian citizen is defeated'.\n#pred
      blawx_defeated(Z,-canadian_citizen,X) :: 'the conclusion in @(Z) that @(X) is
      a Canadian citizen is defeated'.\n#pred blawx_initially(canadian_citizen(X))
      :: 'that @(X) is a Canadian citizen holds initially'.\n#pred blawx_initially(-canadian_citizen(X))
      :: 'that it is not the case that @(X) is a Canadian citizen holds initially'.\n#pred
      blawx_ultimately(canadian_citizen(X)) :: 'that @(X) is a Canadian citizen holds
      ultimately'.\n#pred blawx_ultimately(-canadian_citizen(X)) :: 'that it is not
      the case that @(X) is a Canadian citizen holds ultimately'.\n#pred blawx_as_of(canadian_citizen(X),T)
      :: 'that @(X) is a Canadian citizen holds at @(T)'.\n#pred blawx_as_of(-canadian_citizen(X),T)
      :: 'that it is not the case that @(X) is a Canadian citizen holds at @(T)'.\n#pred
      blawx_during(T1,canadian_citizen(X),T2) :: 'that @(X) is a Canadian citizen
      held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-canadian_citizen(X),T2)
      :: 'that it is not the case that @(X) is a Canadian citizen held between @(T1)
      and @(T2)'.\n#pred blawx_becomes(canadian_citizen(X),T) :: 'that @(X) is a Canadian
      citizen became true at @(T)'.\n#pred blawx_becomes(-canadian_citizen(X),T) ::
      'that it is not the case that @(X) is a Canadian citizen became true at @(T)'.\n#pred
      blawx_not_interrupted(Start,canadian_citizen(X),End) :: '@(X) is a Canadian
      citizen remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-canadian_citizen(X),End)
      :: 'it is not the case that @(X) is a Canadian citizen remained the case between
      @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),canadian_citizen(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-canadian_citizen(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-canadian_citizen(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(canadian_citizen(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),canadian_citizen(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-canadian_citizen(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-canadian_citizen(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(canadian_citizen(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),canadian_citizen(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-canadian_citizen(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-canadian_citizen(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(canadian_citizen(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),canadian_citizen(X),datetime(eot))
      :- blawx_initially(canadian_citizen(X)), blawx_ultimately(canadian_citizen(X)),
      findall(Time,blawx_becomes(-canadian_citizen(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-canadian_citizen(X),datetime(eot))
      :- blawx_initially(-canadian_citizen(X)), blawx_ultimately(-canadian_citizen(X)),
      findall(Time,blawx_becomes(canadian_citizen(X),datetime(Time)),[]).\nblawx_as_of(canadian_citizen(X),datetime(Time))
      :- blawx_initially(canadian_citizen(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),canadian_citizen(X),datetime(BeforeT)).\nblawx_as_of(canadian_citizen(X),datetime(Time))
      :- blawx_becomes(canadian_citizen(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),canadian_citizen(X),datetime(Time)).\nblawx_as_of(-canadian_citizen(X),datetime(Time))
      :- blawx_initially(-canadian_citizen(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-canadian_citizen(X),datetime(BeforeT)).\nblawx_as_of(-canadian_citizen(X),datetime(Time))
      :- blawx_becomes(-canadian_citizen(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-canadian_citizen(X),datetime(Time)).\nblawx_during(datetime(Start),canadian_citizen(X),datetime(End))
      :- blawx_becomes(canadian_citizen(X),datetime(Start)), blawx_becomes(-canadian_citizen(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),canadian_citizen(X),datetime(End)).\nblawx_during(datetime(bot),canadian_citizen(X),datetime(End))
      :- blawx_initially(canadian_citizen(X)), blawx_becomes(-canadian_citizen(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),canadian_citizen(X),datetime(End)).\nblawx_during(datetime(Start),canadian_citizen(X),datetime(eot))
      :- blawx_ultimately(canadian_citizen(X)), blawx_becomes(-canadian_citizen(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),canadian_citizen(X),datetime(eot)).\nblawx_during(datetime(bot),canadian_citizen(X),datetime(eot))
      :- blawx_initially(canadian_citizen(X)), blawx_ultimately(canadian_citizen(X)),
      blawx_becomes(-canadian_citizen(X),datetime(Start)), blawx_not_interrupted(datetime(bot),canadian_citizen(X),datetime(eot)).\nblawx_during(datetime(Start),-canadian_citizen(X),datetime(End))
      :- blawx_becomes(-canadian_citizen(X),datetime(Start)), blawx_becomes(canadian_citizen(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-canadian_citizen(X),datetime(End)).\nblawx_during(datetime(bot),-canadian_citizen(X),datetime(End))
      :- blawx_initially(-canadian_citizen(X)), blawx_becomes(canadian_citizen(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-canadian_citizen(X),datetime(End)).\nblawx_during(datetime(Start),-canadian_citizen(X),datetime(eot))
      :- blawx_ultimately(-canadian_citizen(X)), blawx_becomes(canadian_citizen(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-canadian_citizen(X),datetime(eot)).\nblawx_during(datetime(bot),-canadian_citizen(X),datetime(eot))
      :- blawx_initially(-canadian_citizen(X)), blawx_ultimately(-canadian_citizen(X)),
      blawx_becomes(-canadian_citizen(X),datetime(Start)), blawx_not_interrupted(datetime(bot),-canadian_citizen(X),datetime(eot)).\nblawx_attribute(person,meets_4_1_requirement,boolean).\nblawx_attribute_nlg(meets_4_1_requirement,not_applicable,\"\",not_applicable,\"is
      a person listed in subsection 4(1)\").\n:- dynamic meets_4_1_requirement/1.\n#pred
      meets_4_1_requirement(X) :: '@(X) is a person listed in subsection 4(1)'.\n#pred
      holds(user,meets_4_1_requirement,X) :: 'it is provided as a fact that @(X) is
      a person listed in subsection 4(1)'.\n#pred holds(user,-meets_4_1_requirement,X)
      :: 'it is provided as a fact that it is not the case that @(X) is a person listed
      in subsection 4(1)'.\n#pred holds(Z,meets_4_1_requirement,X) :: 'the conclusion
      in @(Z) that @(X) is a person listed in subsection 4(1) holds'.\n#pred holds(Z,-meets_4_1_requirement,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a person listed
      in subsection 4(1) holds'.\n#pred according_to(Z,meets_4_1_requirement,X) ::
      'according to @(Z), @(X) is a person listed in subsection 4(1)'.\n#pred according_to(Z,-meets_4_1_requirement,X)
      :: 'according to @(Z), it is not the case that @(X) is a person listed in subsection
      4(1)'.\n#pred blawx_defeated(Z,meets_4_1_requirement,X) :: 'the conclusion in
      @(Z) that @(X) is a person listed in subsection 4(1) is defeated'.\n#pred blawx_defeated(Z,-meets_4_1_requirement,X)
      :: 'the conclusion in @(Z) that @(X) is a person listed in subsection 4(1) is
      defeated'.\n#pred blawx_initially(meets_4_1_requirement(X)) :: 'that @(X) is
      a person listed in subsection 4(1) holds initially'.\n#pred blawx_initially(-meets_4_1_requirement(X))
      :: 'that it is not the case that @(X) is a person listed in subsection 4(1)
      holds initially'.\n#pred blawx_ultimately(meets_4_1_requirement(X)) :: 'that
      @(X) is a person listed in subsection 4(1) holds ultimately'.\n#pred blawx_ultimately(-meets_4_1_requirement(X))
      :: 'that it is not the case that @(X) is a person listed in subsection 4(1)
      holds ultimately'.\n#pred blawx_as_of(meets_4_1_requirement(X),T) :: 'that @(X)
      is a person listed in subsection 4(1) holds at @(T)'.\n#pred blawx_as_of(-meets_4_1_requirement(X),T)
      :: 'that it is not the case that @(X) is a person listed in subsection 4(1)
      holds at @(T)'.\n#pred blawx_during(T1,meets_4_1_requirement(X),T2) :: 'that
      @(X) is a person listed in subsection 4(1) held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-meets_4_1_requirement(X),T2) :: 'that it is not the case that
      @(X) is a person listed in subsection 4(1) held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(meets_4_1_requirement(X),T) :: 'that @(X) is a person listed in
      subsection 4(1) became true at @(T)'.\n#pred blawx_becomes(-meets_4_1_requirement(X),T)
      :: 'that it is not the case that @(X) is a person listed in subsection 4(1)
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,meets_4_1_requirement(X),End)
      :: '@(X) is a person listed in subsection 4(1) remained the case between @(Start)
      and @(End)'.\n#pred blawx_not_interrupted(Start,-meets_4_1_requirement(X),End)
      :: 'it is not the case that @(X) is a person listed in subsection 4(1) remained
      the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),meets_4_1_requirement(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-meets_4_1_requirement(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),meets_4_1_requirement(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-meets_4_1_requirement(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),meets_4_1_requirement(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-meets_4_1_requirement(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(meets_4_1_requirement(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),meets_4_1_requirement(X),datetime(eot))
      :- blawx_initially(meets_4_1_requirement(X)), blawx_ultimately(meets_4_1_requirement(X)),
      findall(Time,blawx_becomes(-meets_4_1_requirement(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-meets_4_1_requirement(X),datetime(eot))
      :- blawx_initially(-meets_4_1_requirement(X)), blawx_ultimately(-meets_4_1_requirement(X)),
      findall(Time,blawx_becomes(meets_4_1_requirement(X),datetime(Time)),[]).\nblawx_as_of(meets_4_1_requirement(X),datetime(Time))
      :- blawx_initially(meets_4_1_requirement(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),meets_4_1_requirement(X),datetime(BeforeT)).\nblawx_as_of(meets_4_1_requirement(X),datetime(Time))
      :- blawx_becomes(meets_4_1_requirement(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),meets_4_1_requirement(X),datetime(Time)).\nblawx_as_of(-meets_4_1_requirement(X),datetime(Time))
      :- blawx_initially(-meets_4_1_requirement(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-meets_4_1_requirement(X),datetime(BeforeT)).\nblawx_as_of(-meets_4_1_requirement(X),datetime(Time))
      :- blawx_becomes(-meets_4_1_requirement(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-meets_4_1_requirement(X),datetime(Time)).\nblawx_during(datetime(Start),meets_4_1_requirement(X),datetime(End))
      :- blawx_becomes(meets_4_1_requirement(X),datetime(Start)), blawx_becomes(-meets_4_1_requirement(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),meets_4_1_requirement(X),datetime(End)).\nblawx_during(datetime(bot),meets_4_1_requirement(X),datetime(End))
      :- blawx_initially(meets_4_1_requirement(X)), blawx_becomes(-meets_4_1_requirement(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),meets_4_1_requirement(X),datetime(End)).\nblawx_during(datetime(Start),meets_4_1_requirement(X),datetime(eot))
      :- blawx_ultimately(meets_4_1_requirement(X)), blawx_becomes(-meets_4_1_requirement(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),meets_4_1_requirement(X),datetime(eot)).\nblawx_during(datetime(bot),meets_4_1_requirement(X),datetime(eot))
      :- blawx_initially(meets_4_1_requirement(X)), blawx_ultimately(meets_4_1_requirement(X)),
      blawx_becomes(-meets_4_1_requirement(X),datetime(Start)), blawx_not_interrupted(datetime(bot),meets_4_1_requirement(X),datetime(eot)).\nblawx_during(datetime(Start),-meets_4_1_requirement(X),datetime(End))
      :- blawx_becomes(-meets_4_1_requirement(X),datetime(Start)), blawx_becomes(meets_4_1_requirement(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-meets_4_1_requirement(X),datetime(End)).\nblawx_during(datetime(bot),-meets_4_1_requirement(X),datetime(End))
      :- blawx_initially(-meets_4_1_requirement(X)), blawx_becomes(meets_4_1_requirement(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-meets_4_1_requirement(X),datetime(End)).\nblawx_during(datetime(Start),-meets_4_1_requirement(X),datetime(eot))
      :- blawx_ultimately(-meets_4_1_requirement(X)), blawx_becomes(meets_4_1_requirement(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-meets_4_1_requirement(X),datetime(eot)).\nblawx_during(datetime(bot),-meets_4_1_requirement(X),datetime(eot))
      :- blawx_initially(-meets_4_1_requirement(X)), blawx_ultimately(-meets_4_1_requirement(X)),
      blawx_becomes(-meets_4_1_requirement(X),datetime(Start)), blawx_not_interrupted(datetime(bot),-meets_4_1_requirement(X),datetime(eot)).\n\naccording_to(sec_4__subsec_1__para_a_section,meets_4_1_requirement,Person)
      :- person(Person),\ncanadian_citizen(Person),\nnot permanent_resident(Person).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_1__para_a_section,meets_4_1_requirement,Person)
      :- according_to(sec_4__subsec_1__para_a_section,meets_4_1_requirement,Person).\n\n%
      BLAWX CHECK DUPLICATES\n  meets_4_1_requirement(Person) :- holds(sec_4__subsec_1__para_a_section,meets_4_1_requirement,Person)."
- model: blawx.workspace
  pk: 5
  fields:
    ruledoc: 1
    workspace_name: sec_4__subsec_1__para_b_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="Bv4R^%Jy4$,2?bIfX)rz" x="24" y="53"><statement name="statements"><block
      type="new_attribute_declaration" id="!9sfR`KZMF59f/Nj21.}"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="boolean" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">permanent_resident</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">is a permanent resident
      within the meaning of subsection 2(1) of the Immigration and Refugee Protection
      Act</field></block></statement></block><block type="attributed_rule" id="eh_SzQLPCx$$xV#Wi2,k"
      x="24" y="202"><field name="defeasible">FALSE</field><field name="inapplicable">FALSE</field><statement
      name="conditions"><block type="new_object_category" id="A]+x{X]?tnwM[g4XBfaK"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="Z0|]inn65];_@72LRl@G"><field name="variable_name">Person</field></block></value><next><block
      type="unary_attribute_selector" id=".:?n9(eYcVquooVTY4`0"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="permanent_resident" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a permanent resident within the
      meaning of subsection 2(1) of the Immigration and Refugee Protection Act</field><value
      name="first_element"><block type="variable" id="DY@N.Oo+kam].j3nX0)a"><field
      name="variable_name">Person</field></block></value><next><block type="default_negation"
      id=";{,tkhf7.,I):I)=0p+e"><statement name="default_negated_statement"><block
      type="unary_attribute_selector" id="QJ*|Of1~*(Ok9;_Nnk7U"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="canadian_citizen" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is a Canadian citizen</field><value name="first_element"><block
      type="variable" id="6xbt+m/P+:MBJ]xUo{.u"><field name="variable_name">Person</field></block></value></block></statement></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="Gk+tV`GfC,,GmI?yQjy]"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1__para_b_section"></mutation><field
      name="doc_part_name">ATIA 4.1.b</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="%,md2$ZgH7?T06kXHp?+"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="meets_4_1_requirement" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a person listed in subsection
      4(1)</field><value name="first_element"><block type="variable" id="U2$(+agHlEXkN]o*We~2"><field
      name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_attribute(person,permanent_resident,boolean).\nblawx_attribute_nlg(permanent_resident,not_applicable,\"\",not_applicable,\"is
      a permanent resident within the meaning of subsection 2(1) of the Immigration
      and Refugee Protection Act\").\n:- dynamic permanent_resident/1.\n#pred permanent_resident(X)
      :: '@(X) is a permanent resident within the meaning of subsection 2(1) of the
      Immigration and Refugee Protection Act'.\n#pred holds(user,permanent_resident,X)
      :: 'it is provided as a fact that @(X) is a permanent resident within the meaning
      of subsection 2(1) of the Immigration and Refugee Protection Act'.\n#pred holds(user,-permanent_resident,X)
      :: 'it is provided as a fact that it is not the case that @(X) is a permanent
      resident within the meaning of subsection 2(1) of the Immigration and Refugee
      Protection Act'.\n#pred holds(Z,permanent_resident,X) :: 'the conclusion in
      @(Z) that @(X) is a permanent resident within the meaning of subsection 2(1)
      of the Immigration and Refugee Protection Act holds'.\n#pred holds(Z,-permanent_resident,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a permanent
      resident within the meaning of subsection 2(1) of the Immigration and Refugee
      Protection Act holds'.\n#pred according_to(Z,permanent_resident,X) :: 'according
      to @(Z), @(X) is a permanent resident within the meaning of subsection 2(1)
      of the Immigration and Refugee Protection Act'.\n#pred according_to(Z,-permanent_resident,X)
      :: 'according to @(Z), it is not the case that @(X) is a permanent resident
      within the meaning of subsection 2(1) of the Immigration and Refugee Protection
      Act'.\n#pred blawx_defeated(Z,permanent_resident,X) :: 'the conclusion in @(Z)
      that @(X) is a permanent resident within the meaning of subsection 2(1) of the
      Immigration and Refugee Protection Act is defeated'.\n#pred blawx_defeated(Z,-permanent_resident,X)
      :: 'the conclusion in @(Z) that @(X) is a permanent resident within the meaning
      of subsection 2(1) of the Immigration and Refugee Protection Act is defeated'.\n#pred
      blawx_initially(permanent_resident(X)) :: 'that @(X) is a permanent resident
      within the meaning of subsection 2(1) of the Immigration and Refugee Protection
      Act holds initially'.\n#pred blawx_initially(-permanent_resident(X)) :: 'that
      it is not the case that @(X) is a permanent resident within the meaning of subsection
      2(1) of the Immigration and Refugee Protection Act holds initially'.\n#pred
      blawx_ultimately(permanent_resident(X)) :: 'that @(X) is a permanent resident
      within the meaning of subsection 2(1) of the Immigration and Refugee Protection
      Act holds ultimately'.\n#pred blawx_ultimately(-permanent_resident(X)) :: 'that
      it is not the case that @(X) is a permanent resident within the meaning of subsection
      2(1) of the Immigration and Refugee Protection Act holds ultimately'.\n#pred
      blawx_as_of(permanent_resident(X),T) :: 'that @(X) is a permanent resident within
      the meaning of subsection 2(1) of the Immigration and Refugee Protection Act
      holds at @(T)'.\n#pred blawx_as_of(-permanent_resident(X),T) :: 'that it is
      not the case that @(X) is a permanent resident within the meaning of subsection
      2(1) of the Immigration and Refugee Protection Act holds at @(T)'.\n#pred blawx_during(T1,permanent_resident(X),T2)
      :: 'that @(X) is a permanent resident within the meaning of subsection 2(1)
      of the Immigration and Refugee Protection Act held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-permanent_resident(X),T2) :: 'that it is not the case that
      @(X) is a permanent resident within the meaning of subsection 2(1) of the Immigration
      and Refugee Protection Act held between @(T1) and @(T2)'.\n#pred blawx_becomes(permanent_resident(X),T)
      :: 'that @(X) is a permanent resident within the meaning of subsection 2(1)
      of the Immigration and Refugee Protection Act became true at @(T)'.\n#pred blawx_becomes(-permanent_resident(X),T)
      :: 'that it is not the case that @(X) is a permanent resident within the meaning
      of subsection 2(1) of the Immigration and Refugee Protection Act became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,permanent_resident(X),End) :: '@(X)
      is a permanent resident within the meaning of subsection 2(1) of the Immigration
      and Refugee Protection Act remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-permanent_resident(X),End) :: 'it is not the case
      that @(X) is a permanent resident within the meaning of subsection 2(1) of the
      Immigration and Refugee Protection Act remained the case between @(Start) and
      @(End)'.\nblawx_not_interrupted(datetime(Start),permanent_resident(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-permanent_resident(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-permanent_resident(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(permanent_resident(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),permanent_resident(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-permanent_resident(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-permanent_resident(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(permanent_resident(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),permanent_resident(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-permanent_resident(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-permanent_resident(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(permanent_resident(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),permanent_resident(X),datetime(eot))
      :- blawx_initially(permanent_resident(X)), blawx_ultimately(permanent_resident(X)),
      findall(Time,blawx_becomes(-permanent_resident(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-permanent_resident(X),datetime(eot))
      :- blawx_initially(-permanent_resident(X)), blawx_ultimately(-permanent_resident(X)),
      findall(Time,blawx_becomes(permanent_resident(X),datetime(Time)),[]).\nblawx_as_of(permanent_resident(X),datetime(Time))
      :- blawx_initially(permanent_resident(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),permanent_resident(X),datetime(BeforeT)).\nblawx_as_of(permanent_resident(X),datetime(Time))
      :- blawx_becomes(permanent_resident(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),permanent_resident(X),datetime(Time)).\nblawx_as_of(-permanent_resident(X),datetime(Time))
      :- blawx_initially(-permanent_resident(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-permanent_resident(X),datetime(BeforeT)).\nblawx_as_of(-permanent_resident(X),datetime(Time))
      :- blawx_becomes(-permanent_resident(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-permanent_resident(X),datetime(Time)).\nblawx_during(datetime(Start),permanent_resident(X),datetime(End))
      :- blawx_becomes(permanent_resident(X),datetime(Start)), blawx_becomes(-permanent_resident(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),permanent_resident(X),datetime(End)).\nblawx_during(datetime(bot),permanent_resident(X),datetime(End))
      :- blawx_initially(permanent_resident(X)), blawx_becomes(-permanent_resident(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),permanent_resident(X),datetime(End)).\nblawx_during(datetime(Start),permanent_resident(X),datetime(eot))
      :- blawx_ultimately(permanent_resident(X)), blawx_becomes(-permanent_resident(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),permanent_resident(X),datetime(eot)).\nblawx_during(datetime(bot),permanent_resident(X),datetime(eot))
      :- blawx_initially(permanent_resident(X)), blawx_ultimately(permanent_resident(X)),
      blawx_becomes(-permanent_resident(X),datetime(Start)), blawx_not_interrupted(datetime(bot),permanent_resident(X),datetime(eot)).\nblawx_during(datetime(Start),-permanent_resident(X),datetime(End))
      :- blawx_becomes(-permanent_resident(X),datetime(Start)), blawx_becomes(permanent_resident(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-permanent_resident(X),datetime(End)).\nblawx_during(datetime(bot),-permanent_resident(X),datetime(End))
      :- blawx_initially(-permanent_resident(X)), blawx_becomes(permanent_resident(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-permanent_resident(X),datetime(End)).\nblawx_during(datetime(Start),-permanent_resident(X),datetime(eot))
      :- blawx_ultimately(-permanent_resident(X)), blawx_becomes(permanent_resident(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-permanent_resident(X),datetime(eot)).\nblawx_during(datetime(bot),-permanent_resident(X),datetime(eot))
      :- blawx_initially(-permanent_resident(X)), blawx_ultimately(-permanent_resident(X)),
      blawx_becomes(-permanent_resident(X),datetime(Start)), blawx_not_interrupted(datetime(bot),-permanent_resident(X),datetime(eot)).\n\naccording_to(sec_4__subsec_1__para_b_section,meets_4_1_requirement,Person)
      :- person(Person),\npermanent_resident(Person),\nnot canadian_citizen(Person).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_1__para_b_section,meets_4_1_requirement,Person)
      :- according_to(sec_4__subsec_1__para_b_section,meets_4_1_requirement,Person).\n\n%
      BLAWX CHECK DUPLICATES\n  meets_4_1_requirement(Person) :- holds(sec_4__subsec_1__para_b_section,meets_4_1_requirement,Person)."
- model: blawx.workspace
  pk: 6
  fields:
    ruledoc: 1
    workspace_name: sec_4__subsec_2_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="4%Za3^3!zH_B}y%|^,JS" x="0" y="0"><statement name="statements"><block type="new_category_declaration"
      id="kS*18pP4R8H)$5:V7{Fs"><field name="category_name">governor_in_council</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      the Governor in Council</field><next><block type="object_declaration" id="-QSfCBVmamDk)=yLe4Oa"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="governor_in_council" prefix="null"
      postfix="null"></mutation><field name="prefix"></field><field name="object_name">governor_in_council</field><field
      name="postfix">is the Governor in Council</field><next><block type="new_category_declaration"
      id="UY:NVoV2UF/;ps2=?s#;"><field name="category_name">group</field><field name="prefix"></field><field
      name="first_element">object</field><field name="postfix">is a group</field></block></next></block></next></block></statement></block><block
      type="unattributed_fact" id="p#`Vky224XBZ`xCNYe~]" x="0" y="193"><statement
      name="statements"><block type="relationship_declaration" id="l%{bQNx%N)4(02Q3i8)G"><mutation
      xmlns="http://www.w3.org/1999/xhtml" prefix1="" type1="governor_in_council"
      prefix2="may, by order, extend the right to be given access to" type2="record"
      prefix3="to" type3="group" type_list="[[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="relationship_name">may_include_persons_via_gic_order</field><field name="relationship_arity">3</field><field
      name="prefix1"></field><field name="type1">governor_in_council</field><field
      name="prefix2">may, by order, extend the right to be given access to</field><field
      name="type2">record</field><field name="prefix3">to</field><field name="type3">group</field><field
      name="postfix">and set such conditions they deem appropriate</field><next><block
      type="relationship_declaration" id="ErBK@S$5.M8yU^8Urp;5"><mutation xmlns="http://www.w3.org/1999/xhtml"
      prefix1="" type1="governor_in_council" prefix2="extends the right to be given
      access to" type2="record" prefix3="to" type3="group" type_list="[[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="relationship_name">includes_persons_via_gic_order</field><field name="relationship_arity">3</field><field
      name="prefix1"></field><field name="type1">governor_in_council</field><field
      name="prefix2">extends the right to be given access to</field><field name="type2">record</field><field
      name="prefix3">to</field><field name="type3">group</field><field name="postfix">via
      order</field><next><block type="new_attribute_declaration" id="i_!S-+`cwg3cb95@{%Kb"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="group" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"
      attribute_type="person" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">group</field><field name="attribute_name">group_not_reffered_to_in_4_1_paragraphs</field><field
      name="attribute_type">person</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">is a group of persons
      who are not referred to in subsection 4(1) for the same reason as</field><field
      name="second_element">value</field><field name="postfix"></field></block></next></block></next></block></statement></block><block
      type="attributed_rule" id="U@gBV9?p55L1Lx6J9Z^D" x="0" y="438"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="J^Tg,0xQ.3kUqykX6%[1"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="fHpi4w6k_Z[d%Ui9B+C#"><field name="variable_name">Person</field></block></value><next><block
      type="new_object_category" id="*0OC8o6L~=+p}:3eJcyW"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><value name="object"><block type="variable"
      id="$}uxkJppb|MXeO#qLAAW"><field name="variable_name">Record</field></block></value><next><block
      type="new_object_category" id="1RI_RfdY#YQqIJ8DkOUs"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="group" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">group</field><value name="object"><block type="variable"
      id="kEMp$q[OzV9ew}ye^ZEP"><field name="variable_name">Group</field></block></value><next><block
      type="default_negation" id="//z2A]:,`X_khyzo}[JD"><statement name="default_negated_statement"><block
      type="according_to" id="dQn!*/1{jk91VbsguyZx"><value name="rule"><block type="doc_selector"
      id="}w)0}R`vXdJ1T2%ljy4L"><mutation xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1_section"></mutation><field
      name="doc_part_name">ATIA 4.1</field></block></value><statement name="statement"><block
      type="attribute_selector" id="W`Cl,:_yD)lEzKP}+a6c"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="has_a_right_to_access_record" attributetype="record" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">has a right to access</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="5lt-,^eAO+=P5M]5B,r#"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="z:RN[sBPMR~Rbn.pl-d`"><field name="variable_name">Record</field></block></value></block></statement></block></statement><next><block
      type="attribute_selector" id="BJg)tU`*y=}pZ1G9{qXM"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="group_not_reffered_to_in_4_1_paragraphs" attributetype="person"
      attributeorder="ov"></mutation><field name="prefix"></field><field name="infix">is
      a group of persons who are not referred to in subsection 4(1) for the same reason
      as</field><field name="postfix"></field><value name="first_element"><block type="variable"
      id="F*W+|m#QD#u2A3usDni8"><field name="variable_name">Group</field></block></value><value
      name="second_element"><block type="variable" id="ix8AK-Ur~wELy,NF*b~D"><field
      name="variable_name">Person</field></block></value></block></next></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="i9i#~,*g0v3_9ktLJWTo"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_2_section"></mutation><field
      name="doc_part_name">ATIA 4.2</field></block></value><statement name="conclusion"><block
      type="relationship_selector3" id="!J#tgAtD8p4(j:K.m.Pz"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="may_include_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">may, by order, extend the right to be given access to</field><field
      name="prefix3">to</field><field name="postfix">and set such conditions they
      deem appropriate</field><value name="parameter1"><block type="object_selector"
      id="yI:@r6^DoI_^6y9c)b-2"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="variable" id="90vX7DRp/l@?wYP$T@dA"><field name="variable_name">Record</field></block></value><value
      name="parameter3"><block type="variable" id="4kmz;r[/I#j18*ngKBS-"><field name="variable_name">Group</field></block></value></block></statement></block><block
      type="attributed_rule" id="(HbP$5y}cB28dc/q6P+t" x="0" y="866"><field name="defeasible">TRUE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id=":$1|o?.GTDV^!?T+3?z="><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="U!~pDISn63e!Ft_C)(ko"><field name="variable_name">Person</field></block></value><next><block
      type="new_object_category" id="NG%3!v/Z=ht}{AUt/X-+"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><value name="object"><block type="variable"
      id="E-3v#1*?97~rOPJPyNIX"><field name="variable_name">Record</field></block></value><next><block
      type="new_object_category" id="VNDMc)kD^9aN_~RDc2@f"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="group" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">group</field><value name="object"><block type="variable"
      id="EmIXX4x;`)~I[~c_D]:T"><field name="variable_name">Group</field></block></value><next><block
      type="new_object_category" id="pEN@qb|%RW]Kfma{t9(E"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="government_institution" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">government_institution</field><value name="object"><block
      type="variable" id="yo1^r#gjSPCY10j~O$#2"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="relationship_selector3" id="U05u9s0]:6LhuKyw6A4R"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="may_include_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">may, by order, extend the right to be given access to</field><field
      name="prefix3">to</field><field name="postfix">and set such conditions they
      deem appropriate</field><value name="parameter1"><block type="object_selector"
      id="Qc?e.@ta8a50,aO`tyx?"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="variable" id="J=RlEE:}$tbqDC?*_A*s"><field name="variable_name">Record</field></block></value><value
      name="parameter3"><block type="variable" id="yo}TN:e3`[Vj/m`R#pTG"><field name="variable_name">Group</field></block></value><next><block
      type="relationship_selector3" id="7Vf?nR3t?@~%!/A_PJw?"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="includes_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">extends the right to be given access to</field><field name="prefix3">to</field><field
      name="postfix">via order</field><value name="parameter1"><block type="object_selector"
      id="m9w/-~AzTUVk;+*K%a^?"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="variable" id="=3kW_$lwsD!HhpQXL.]7"><field name="variable_name">Record</field></block></value><value
      name="parameter3"><block type="variable" id="d1yI3N4hf^5e5XFn@d~Z"><field name="variable_name">Group</field></block></value><next><block
      type="attribute_selector" id="i/Q[3qh2wx]-0apGn2c_"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="group_not_reffered_to_in_4_1_paragraphs" attributetype="person"
      attributeorder="ov"></mutation><field name="prefix"></field><field name="infix">is
      a group of persons who are not referred to in subsection 4(1) for the same reason
      as</field><field name="postfix"></field><value name="first_element"><block type="variable"
      id="oLd^E}roGZcd4_%/bVT+"><field name="variable_name">Group</field></block></value><value
      name="second_element"><block type="variable" id="Ko^-aXCJ?iE_a-5RMxk3"><field
      name="variable_name">Person</field></block></value><next><block type="attribute_selector"
      id="CxNh@o8(nOGA0flar_]M"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="under_the_control_of_government_institution"
      attributetype="government_institution" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is under the control of</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="s#oM9w!-5-uMFOJ*,Ev~"><field
      name="variable_name">Record</field></block></value><value name="second_element"><block
      type="variable" id="igg;a__8uF$Z=09kd|`G"><field name="variable_name">GovInstitution</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="w:pVRWI(;|$?kYYcl)o3"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_2_section"></mutation><field
      name="doc_part_name">ATIA 4.2</field></block></value><statement name="conclusion"><block
      type="attribute_selector" id="{Hz3k62,;wVwm2BN{tSb"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="has_a_right_to_access_record" attributetype="record" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">has a right to access</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="~B?Ndi7.tNrDR%XbQ|XK"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="/QTt$|6vx9*uf@#g$s8e"><field name="variable_name">Record</field></block></value></block></statement></block><block
      type="attributed_rule" id="/G?,}EayU~Qqm;i{Y!lm" x="0" y="1316"><field name="defeasible">TRUE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="=p}.);*lkz/)Gb5f(TI]"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="EP=oChhJLLt]r78oAbkp"><field name="variable_name">Person</field></block></value><next><block
      type="new_object_category" id="_1HXP6evEMbxB5vtRt6f"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">record</field><value name="object"><block type="variable"
      id=")?5q[Y.xu%HHlZBu^FZf"><field name="variable_name">Record</field></block></value><next><block
      type="new_object_category" id="UU1i{y+s8Uc%prgBYyn5"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="group" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">group</field><value name="object"><block type="variable"
      id="#*}BmrMiLS`4ItXVi0]+"><field name="variable_name">Group</field></block></value><next><block
      type="new_object_category" id="9(Dmg(F`gz%ni:7`Y/*_"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="government_institution" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">government_institution</field><value name="object"><block
      type="variable" id="oM0QT3I4w~V$np)IFQng"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="new_object_category" id="kcQ8,I5*1vwz0l75yBU!"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="request" category_list="[[&quot;person&quot;,&quot;person&quot;],[&quot;record&quot;,&quot;record&quot;],[&quot;request&quot;,&quot;request&quot;],[&quot;information&quot;,&quot;information&quot;],[&quot;government_institution&quot;,&quot;government_institution&quot;],[&quot;governor_in_council&quot;,&quot;governor_in_council&quot;],[&quot;group&quot;,&quot;group&quot;]]"></mutation><field
      name="category_name">request</field><value name="object"><block type="variable"
      id="(-%F9?U*Arbl#bn}N=aE"><field name="variable_name">Request</field></block></value><next><block
      type="relationship_selector3" id="D-1_a/E^$~Lepn`dh(4b"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="may_include_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">may, by order, extend the right to be given access to</field><field
      name="prefix3">to</field><field name="postfix">and set such conditions they
      deem appropriate</field><value name="parameter1"><block type="object_selector"
      id="yvGC^XimU[SdB(pTU)6)"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="variable" id="wNG0o02Q4GR/e`RCOz|m"><field name="variable_name">Record</field></block></value><value
      name="parameter3"><block type="variable" id="//)nQXX7$FcC+?FqTwp:"><field name="variable_name">Group</field></block></value><next><block
      type="relationship_selector3" id=")MZvicL+IHBuZT4*1[g1"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="includes_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">extends the right to be given access to</field><field name="prefix3">to</field><field
      name="postfix">via order</field><value name="parameter1"><block type="object_selector"
      id="H^i7lQ1q{v#sOHwU2yYQ"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="variable" id="zY$0C(HfZt_RfodF=nc?"><field name="variable_name">Record</field></block></value><value
      name="parameter3"><block type="variable" id="223rKW%5@kC/Iv0|,m:|"><field name="variable_name">Group</field></block></value><next><block
      type="attribute_selector" id="N|]0_!Iz4WTeQ9H8Qc*g"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="group_not_reffered_to_in_4_1_paragraphs" attributetype="person"
      attributeorder="ov"></mutation><field name="prefix"></field><field name="infix">is
      a group of persons who are not referred to in subsection 4(1) for the same reason
      as</field><field name="postfix"></field><value name="first_element"><block type="variable"
      id="C$poP2mA1{r)}9a?au0m"><field name="variable_name">Group</field></block></value><value
      name="second_element"><block type="variable" id="f!NioO^fe6/8=sI`tz+:"><field
      name="variable_name">Person</field></block></value><next><block type="attribute_selector"
      id="xQ,op-;?^IG6^qXixYne"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="under_the_control_of_government_institution"
      attributetype="government_institution" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is under the control of</field><field
      name="postfix"></field><value name="first_element"><block type="variable" id="(AtNF~GrkiZC2Stu82cU"><field
      name="variable_name">Record</field></block></value><value name="second_element"><block
      type="variable" id="*y@sCGRaC|k,wL|@A-1B"><field name="variable_name">GovInstitution</field></block></value><next><block
      type="relationship_selector4" id="I~_VBpQ.~%(}_Wy9)S]g"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="4" relationship_name="submitted_request_for_record_to_governent_institution"
      type1="person" type2="request" type3="government_institution" type4="record"></mutation><field
      name="prefix1"></field><field name="prefix2">submitted</field><field name="prefix3">to
      institution</field><field name="prefix4">requesting access to</field><field
      name="postfix"></field><value name="parameter1"><block type="variable" id="Z4Om20?w~h1P1gn7$-XC"><field
      name="variable_name">Person</field></block></value><value name="parameter2"><block
      type="variable" id="/1)6Q7DMBD%-%FV?I(AM"><field name="variable_name">Request</field></block></value><value
      name="parameter3"><block type="variable" id=".QdRr704fH3_c,7=h5[M"><field name="variable_name">GovInstitution</field></block></value><value
      name="parameter4"><block type="variable" id="H9,Pqs-:7,IazU%Z1yNQ"><field name="variable_name">Record</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="7).C=b00;i:mkESA+Lwp"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_2_section"></mutation><field
      name="doc_part_name">ATIA 4.2</field></block></value><statement name="conclusion"><block
      type="relationship_selector3" id="`WaTYH}sAEKf~C|uUrO1"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="must_give_person_access_to_record" type1="government_institution"
      type2="person" type3="record"></mutation><field name="prefix1"></field><field
      name="prefix2">must give</field><field name="prefix3">access to</field><field
      name="postfix"></field><value name="parameter1"><block type="variable" id="8qN8S.7IQgE6n~X(-ZJt"><field
      name="variable_name">GovInstitution</field></block></value><value name="parameter2"><block
      type="variable" id="}jh4C-=V|l/5;3E96_,V"><field name="variable_name">Person</field></block></value><value
      name="parameter3"><block type="variable" id="7)5$BsGZBDKlDN=]=;vC"><field name="variable_name">Record</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_category(governor_in_council).\nblawx_category_nlg(governor_in_council,\"\",\"is
      the Governor in Council\").\n:- dynamic governor_in_council/1.\n#pred governor_in_council(X)
      :: '@(X) is the Governor in Council'.\n#pred holds(user,governor_in_council,X)
      :: 'it is provided as a fact that @(X) is the Governor in Council'.\n#pred holds(user,-governor_in_council,X)
      :: 'it is provided as a fact that it is not the case that @(X) is the Governor
      in Council'.\n#pred holds(Z,governor_in_council,X) :: 'the conclusion in @(Z)
      that @(X) is the Governor in Council holds'.\n#pred holds(Z,-governor_in_council,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is the Governor
      in Council holds'.\n#pred according_to(Z,governor_in_council,X) :: 'according
      to @(Z), @(X) is the Governor in Council'.\n#pred according_to(Z,-governor_in_council,X)
      :: 'according to @(Z), it is not the case that @(X) is the Governor in Council'.\n#pred
      blawx_defeated(Z,governor_in_council,X) :: 'the conclusion in @(Z) that @(X)
      is the Governor in Council is defeated'.\n#pred blawx_defeated(Z,-governor_in_council,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is the Governor
      in Council is defeated'.\n#pred blawx_initially(governor_in_council(X)) :: 'that
      @(X) is the Governor in Council holds initially'.\n#pred blawx_initially(-governor_in_council(X))
      :: 'that it is not the case that @(X) is the Governor in Council holds initially'.\n#pred
      blawx_ultimately(governor_in_council(X)) :: 'that @(X) is the Governor in Council
      holds ultimately'.\n#pred blawx_ultimately(-governor_in_council(X)) :: 'that
      it is not the case that @(X) is the Governor in Council holds ultimately'.\n#pred
      blawx_as_of(governor_in_council(X),T) :: 'that @(X) is the Governor in Council
      holds at @(T)'.\n#pred blawx_as_of(-governor_in_council(X),T) :: 'that it is
      not the case that @(X) is the Governor in Council holds at @(T)'.\n#pred blawx_during(T1,governor_in_council(X),T2)
      :: 'that @(X) is the Governor in Council held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-governor_in_council(X),T2) :: 'that it is not the case that
      @(X) is the Governor in Council held between @(T1) and @(T2)'.\n#pred blawx_becomes(governor_in_council(X),T)
      :: 'that @(X) is the Governor in Council became true at @(T)'.\n#pred blawx_becomes(-governor_in_council(X),T)
      :: 'that it is not the case that @(X) is the Governor in Council became true
      at @(T)'.\n#pred blawx_not_interrupted(Start,governor_in_council(X),End) ::
      '@(X) is the Governor in Council remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-governor_in_council(X),End) :: 'it is not the case
      that @(X) is the Governor in Council remained the case between @(Start) and
      @(End)'.\nblawx_not_interrupted(datetime(Start),governor_in_council(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-governor_in_council(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-governor_in_council(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(governor_in_council(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),governor_in_council(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-governor_in_council(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-governor_in_council(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(governor_in_council(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),governor_in_council(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-governor_in_council(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-governor_in_council(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(governor_in_council(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),governor_in_council(X),datetime(eot))
      :- blawx_initially(governor_in_council(X)), blawx_ultimately(governor_in_council(X)),
      findall(Time,blawx_becomes(-governor_in_council(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-governor_in_council(X),datetime(eot))
      :- blawx_initially(-governor_in_council(X)), blawx_ultimately(-governor_in_council(X)),
      findall(Time,blawx_becomes(governor_in_council(X),datetime(Time)),[]).\nblawx_as_of(governor_in_council(X),datetime(Time))
      :- blawx_initially(governor_in_council(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),governor_in_council(X),datetime(BeforeT)).\nblawx_as_of(governor_in_council(X),datetime(Time))
      :- blawx_becomes(governor_in_council(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),governor_in_council(X),datetime(Time)).\nblawx_as_of(-governor_in_council(X),datetime(Time))
      :- blawx_initially(-governor_in_council(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-governor_in_council(X),datetime(BeforeT)).\nblawx_as_of(-governor_in_council(X),datetime(Time))
      :- blawx_becomes(-governor_in_council(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-governor_in_council(X),datetime(Time)).\nblawx_during(datetime(Start),governor_in_council(X),datetime(End))
      :- blawx_becomes(governor_in_council(X),datetime(Start)), blawx_becomes(-governor_in_council(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),governor_in_council(X),datetime(End)).\nblawx_during(datetime(bot),governor_in_council(X),datetime(End))
      :- blawx_initially(governor_in_council(X)), blawx_becomes(-governor_in_council(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),governor_in_council(X),datetime(End)).\nblawx_during(datetime(Start),governor_in_council(X),datetime(eot))
      :- blawx_ultimately(governor_in_council(X)), blawx_becomes(-governor_in_council(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),governor_in_council(X),datetime(eot)).\nblawx_during(datetime(bot),governor_in_council(X),datetime(eot))
      :- blawx_initially(governor_in_council(X)), blawx_ultimately(governor_in_council(X)),
      blawx_becomes(-governor_in_council(X),datetime(Start)), blawx_not_interrupted(datetime(bot),governor_in_council(X),datetime(eot)).\nblawx_during(datetime(Start),-governor_in_council(X),datetime(End))
      :- blawx_becomes(-governor_in_council(X),datetime(Start)), blawx_becomes(governor_in_council(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-governor_in_council(X),datetime(End)).\nblawx_during(datetime(bot),-governor_in_council(X),datetime(End))
      :- blawx_initially(-governor_in_council(X)), blawx_becomes(governor_in_council(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-governor_in_council(X),datetime(End)).\nblawx_during(datetime(Start),-governor_in_council(X),datetime(eot))
      :- blawx_ultimately(-governor_in_council(X)), blawx_becomes(governor_in_council(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-governor_in_council(X),datetime(eot)).\nblawx_during(datetime(bot),-governor_in_council(X),datetime(eot))
      :- blawx_initially(-governor_in_council(X)), blawx_ultimately(-governor_in_council(X)),
      blawx_becomes(-governor_in_council(X),datetime(Start)), blawx_not_interrupted(datetime(bot),-governor_in_council(X),datetime(eot)).\ngovernor_in_council(governor_in_council).\nblawx_category(group).\nblawx_category_nlg(group,\"\",\"is
      a group\").\n:- dynamic group/1.\n#pred group(X) :: '@(X) is a group'.\n#pred
      holds(user,group,X) :: 'it is provided as a fact that @(X) is a group'.\n#pred
      holds(user,-group,X) :: 'it is provided as a fact that it is not the case that
      @(X) is a group'.\n#pred holds(Z,group,X) :: 'the conclusion in @(Z) that @(X)
      is a group holds'.\n#pred holds(Z,-group,X) :: 'the conclusion in @(Z) that
      it is not the case that @(X) is a group holds'.\n#pred according_to(Z,group,X)
      :: 'according to @(Z), @(X) is a group'.\n#pred according_to(Z,-group,X) ::
      'according to @(Z), it is not the case that @(X) is a group'.\n#pred blawx_defeated(Z,group,X)
      :: 'the conclusion in @(Z) that @(X) is a group is defeated'.\n#pred blawx_defeated(Z,-group,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a group is defeated'.\n#pred
      blawx_initially(group(X)) :: 'that @(X) is a group holds initially'.\n#pred
      blawx_initially(-group(X)) :: 'that it is not the case that @(X) is a group
      holds initially'.\n#pred blawx_ultimately(group(X)) :: 'that @(X) is a group
      holds ultimately'.\n#pred blawx_ultimately(-group(X)) :: 'that it is not the
      case that @(X) is a group holds ultimately'.\n#pred blawx_as_of(group(X),T)
      :: 'that @(X) is a group holds at @(T)'.\n#pred blawx_as_of(-group(X),T) ::
      'that it is not the case that @(X) is a group holds at @(T)'.\n#pred blawx_during(T1,group(X),T2)
      :: 'that @(X) is a group held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-group(X),T2)
      :: 'that it is not the case that @(X) is a group held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(group(X),T) :: 'that @(X) is a group became true at @(T)'.\n#pred
      blawx_becomes(-group(X),T) :: 'that it is not the case that @(X) is a group
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,group(X),End) :: '@(X)
      is a group remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-group(X),End)
      :: 'it is not the case that @(X) is a group remained the case between @(Start)
      and @(End)'.\nblawx_not_interrupted(datetime(Start),group(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-group(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-group(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(group(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),group(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-group(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-group(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(group(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),group(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-group(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-group(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(group(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),group(X),datetime(eot))
      :- blawx_initially(group(X)), blawx_ultimately(group(X)), findall(Time,blawx_becomes(-group(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-group(X),datetime(eot))
      :- blawx_initially(-group(X)), blawx_ultimately(-group(X)), findall(Time,blawx_becomes(group(X),datetime(Time)),[]).\nblawx_as_of(group(X),datetime(Time))
      :- blawx_initially(group(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),group(X),datetime(BeforeT)).\nblawx_as_of(group(X),datetime(Time))
      :- blawx_becomes(group(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),group(X),datetime(Time)).\nblawx_as_of(-group(X),datetime(Time))
      :- blawx_initially(-group(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-group(X),datetime(BeforeT)).\nblawx_as_of(-group(X),datetime(Time))
      :- blawx_becomes(-group(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-group(X),datetime(Time)).\nblawx_during(datetime(Start),group(X),datetime(End))
      :- blawx_becomes(group(X),datetime(Start)), blawx_becomes(-group(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),group(X),datetime(End)).\nblawx_during(datetime(bot),group(X),datetime(End))
      :- blawx_initially(group(X)), blawx_becomes(-group(X),datetime(End)), blawx_not_interrupted(datetime(bot),group(X),datetime(End)).\nblawx_during(datetime(Start),group(X),datetime(eot))
      :- blawx_ultimately(group(X)), blawx_becomes(-group(X),datetime(Start)), blawx_not_interrupted(datetime(Start),group(X),datetime(eot)).\nblawx_during(datetime(bot),group(X),datetime(eot))
      :- blawx_initially(group(X)), blawx_ultimately(group(X)), blawx_becomes(-group(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),group(X),datetime(eot)).\nblawx_during(datetime(Start),-group(X),datetime(End))
      :- blawx_becomes(-group(X),datetime(Start)), blawx_becomes(group(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-group(X),datetime(End)).\nblawx_during(datetime(bot),-group(X),datetime(End))
      :- blawx_initially(-group(X)), blawx_becomes(group(X),datetime(End)), blawx_not_interrupted(datetime(bot),-group(X),datetime(End)).\nblawx_during(datetime(Start),-group(X),datetime(eot))
      :- blawx_ultimately(-group(X)), blawx_becomes(group(X),datetime(Start)), blawx_not_interrupted(datetime(Start),-group(X),datetime(eot)).\nblawx_during(datetime(bot),-group(X),datetime(eot))
      :- blawx_initially(-group(X)), blawx_ultimately(-group(X)), blawx_becomes(-group(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-group(X),datetime(eot)).\n\nblawx_relationship(may_include_persons_via_gic_order,governor_in_council,record,group).\nblawx_relationship_nlg(may_include_persons_via_gic_order,\"\",\"may,
      by order, extend the right to be given access to\",\"to\",\"and set such conditions
      they deem appropriate\").\n:- dynamic may_include_persons_via_gic_order/3.\n#pred
      may_include_persons_via_gic_order(A,B,C) :: '@(A) may, by order, extend the
      right to be given access to @(B) to @(C) and set such conditions they deem appropriate'.\n#pred
      holds(user,may_include_persons_via_gic_order,A,B,C) :: 'it is provided as a
      fact that @(A) may, by order, extend the right to be given access to @(B) to
      @(C) and set such conditions they deem appropriate'.\n#pred holds(user,-may_include_persons_via_gic_order,A,B,C)
      :: 'it is provided as a fact that it is not the case that @(A) may, by order,
      extend the right to be given access to @(B) to @(C) and set such conditions
      they deem appropriate'.\n#pred holds(Z,may_include_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that @(A) may, by order, extend the right to be given
      access to @(B) to @(C) and set such conditions they deem appropriate holds'.\n#pred
      holds(Z,-may_include_persons_via_gic_order,A,B,C) :: 'the conclusion in @(Z)
      that it is not the case that @(A) may, by order, extend the right to be given
      access to @(B) to @(C) and set such conditions they deem appropriate holds'.\n#pred
      according_to(Z,may_include_persons_via_gic_order,A,B,C) :: 'according to @(Z),
      @(A) may, by order, extend the right to be given access to @(B) to @(C) and
      set such conditions they deem appropriate'.\n#pred according_to(Z,-may_include_persons_via_gic_order,A,B,C)
      :: 'according to @(Z), it is not the case that @(A) may, by order, extend the
      right to be given access to @(B) to @(C) and set such conditions they deem appropriate'.\n#pred
      blawx_defeated(Z,may_include_persons_via_gic_order,A,B,C) :: 'the conclusion
      in @(Z) that @(A) may, by order, extend the right to be given access to @(B)
      to @(C) and set such conditions they deem appropriate is defeated'.\n#pred blawx_defeated(Z,-may_include_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that @(A) may, by order, extend the right to be given
      access to @(B) to @(C) and set such conditions they deem appropriate is defeated'.\n#pred
      blawx_initially(may_include_persons_via_gic_order(A,B,C)) :: 'that @(A) may,
      by order, extend the right to be given access to @(B) to @(C) and set such conditions
      they deem appropriate holds initially'.\n#pred blawx_initially(-may_include_persons_via_gic_order(A,B,C))
      :: 'that it is not the case that @(A) may, by order, extend the right to be
      given access to @(B) to @(C) and set such conditions they deem appropriate holds
      initially'.\n#pred blawx_ultimately(may_include_persons_via_gic_order(A,B,C))
      :: 'that @(A) may, by order, extend the right to be given access to @(B) to
      @(C) and set such conditions they deem appropriate holds ultimately'.\n#pred
      blawx_ultimately(-may_include_persons_via_gic_order(A,B,C)) :: 'that it is not
      the case that @(A) may, by order, extend the right to be given access to @(B)
      to @(C) and set such conditions they deem appropriate holds ultimately'.\n#pred
      blawx_as_of(may_include_persons_via_gic_order(A,B,C),T) :: 'that @(A) may, by
      order, extend the right to be given access to @(B) to @(C) and set such conditions
      they deem appropriate holds at @(T)'.\n#pred blawx_as_of(-may_include_persons_via_gic_order(A,B,C),T)
      :: 'that it is not the case that @(A) may, by order, extend the right to be
      given access to @(B) to @(C) and set such conditions they deem appropriate holds
      at @(T)'.\n#pred blawx_during(T1,may_include_persons_via_gic_order(A,B,C),T2)
      :: 'that @(A) may, by order, extend the right to be given access to @(B) to
      @(C) and set such conditions they deem appropriate held between @(T1) and @(T2)'.\n#pred
      blawx_during(T1,-may_include_persons_via_gic_order(A,B,C),T2) :: 'that it is
      not the case that @(A) may, by order, extend the right to be given access to
      @(B) to @(C) and set such conditions they deem appropriate held between @(T1)
      and @(T2)'.\n#pred blawx_becomes(may_include_persons_via_gic_order(A,B,C),T)
      :: 'that @(A) may, by order, extend the right to be given access to @(B) to
      @(C) and set such conditions they deem appropriate became true at @(T)'.\n#pred
      blawx_becomes(-may_include_persons_via_gic_order(A,B,C),T) :: 'that it is not
      the case that @(A) may, by order, extend the right to be given access to @(B)
      to @(C) and set such conditions they deem appropriate became true at @(T)'.\n#pred
      blawx_not_interrupted(Start,may_include_persons_via_gic_order(A,B,C),End) ::
      '@(A) may, by order, extend the right to be given access to @(B) to @(C) and
      set such conditions they deem appropriate remained the case between @(Start)
      and @(End)'.\n#pred blawx_not_interrupted(Start,-may_include_persons_via_gic_order(A,B,C),End)
      :: 'it is not the case that @(A) may, by order, extend the right to be given
      access to @(B) to @(C) and set such conditions they deem appropriate remained
      the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(may_include_persons_via_gic_order(A,B,C)), blawx_ultimately(may_include_persons_via_gic_order(A,B,C)),
      findall(Time,blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(-may_include_persons_via_gic_order(A,B,C)), blawx_ultimately(-may_include_persons_via_gic_order(A,B,C)),
      findall(Time,blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Time)),[]).\nblawx_as_of(may_include_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_initially(may_include_persons_via_gic_order(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(BeforeT)).\nblawx_as_of(may_include_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),may_include_persons_via_gic_order(A,B,C),datetime(Time)).\nblawx_as_of(-may_include_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_initially(-may_include_persons_via_gic_order(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(BeforeT)).\nblawx_as_of(-may_include_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-may_include_persons_via_gic_order(A,B,C),datetime(Time)).\nblawx_during(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(End)), Start
      #< End, blawx_not_interrupted(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_initially(may_include_persons_via_gic_order(A,B,C)), blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_ultimately(may_include_persons_via_gic_order(A,B,C)), blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),may_include_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(may_include_persons_via_gic_order(A,B,C)), blawx_ultimately(may_include_persons_via_gic_order(A,B,C)),
      blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),may_include_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(End)), Start
      #< End, blawx_not_interrupted(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_initially(-may_include_persons_via_gic_order(A,B,C)), blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_ultimately(-may_include_persons_via_gic_order(A,B,C)), blawx_becomes(may_include_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-may_include_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(-may_include_persons_via_gic_order(A,B,C)), blawx_ultimately(-may_include_persons_via_gic_order(A,B,C)),
      blawx_becomes(-may_include_persons_via_gic_order(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),-may_include_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_relationship(includes_persons_via_gic_order,governor_in_council,record,group).\nblawx_relationship_nlg(includes_persons_via_gic_order,\"\",\"extends
      the right to be given access to\",\"to\",\"via order\").\n:- dynamic includes_persons_via_gic_order/3.\n#pred
      includes_persons_via_gic_order(A,B,C) :: '@(A) extends the right to be given
      access to @(B) to @(C) via order'.\n#pred holds(user,includes_persons_via_gic_order,A,B,C)
      :: 'it is provided as a fact that @(A) extends the right to be given access
      to @(B) to @(C) via order'.\n#pred holds(user,-includes_persons_via_gic_order,A,B,C)
      :: 'it is provided as a fact that it is not the case that @(A) extends the right
      to be given access to @(B) to @(C) via order'.\n#pred holds(Z,includes_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that @(A) extends the right to be given access to
      @(B) to @(C) via order holds'.\n#pred holds(Z,-includes_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that it is not the case that @(A) extends the right
      to be given access to @(B) to @(C) via order holds'.\n#pred according_to(Z,includes_persons_via_gic_order,A,B,C)
      :: 'according to @(Z), @(A) extends the right to be given access to @(B) to
      @(C) via order'.\n#pred according_to(Z,-includes_persons_via_gic_order,A,B,C)
      :: 'according to @(Z), it is not the case that @(A) extends the right to be
      given access to @(B) to @(C) via order'.\n#pred blawx_defeated(Z,includes_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that @(A) extends the right to be given access to
      @(B) to @(C) via order is defeated'.\n#pred blawx_defeated(Z,-includes_persons_via_gic_order,A,B,C)
      :: 'the conclusion in @(Z) that @(A) extends the right to be given access to
      @(B) to @(C) via order is defeated'.\n#pred blawx_initially(includes_persons_via_gic_order(A,B,C))
      :: 'that @(A) extends the right to be given access to @(B) to @(C) via order
      holds initially'.\n#pred blawx_initially(-includes_persons_via_gic_order(A,B,C))
      :: 'that it is not the case that @(A) extends the right to be given access to
      @(B) to @(C) via order holds initially'.\n#pred blawx_ultimately(includes_persons_via_gic_order(A,B,C))
      :: 'that @(A) extends the right to be given access to @(B) to @(C) via order
      holds ultimately'.\n#pred blawx_ultimately(-includes_persons_via_gic_order(A,B,C))
      :: 'that it is not the case that @(A) extends the right to be given access to
      @(B) to @(C) via order holds ultimately'.\n#pred blawx_as_of(includes_persons_via_gic_order(A,B,C),T)
      :: 'that @(A) extends the right to be given access to @(B) to @(C) via order
      holds at @(T)'.\n#pred blawx_as_of(-includes_persons_via_gic_order(A,B,C),T)
      :: 'that it is not the case that @(A) extends the right to be given access to
      @(B) to @(C) via order holds at @(T)'.\n#pred blawx_during(T1,includes_persons_via_gic_order(A,B,C),T2)
      :: 'that @(A) extends the right to be given access to @(B) to @(C) via order
      held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-includes_persons_via_gic_order(A,B,C),T2)
      :: 'that it is not the case that @(A) extends the right to be given access to
      @(B) to @(C) via order held between @(T1) and @(T2)'.\n#pred blawx_becomes(includes_persons_via_gic_order(A,B,C),T)
      :: 'that @(A) extends the right to be given access to @(B) to @(C) via order
      became true at @(T)'.\n#pred blawx_becomes(-includes_persons_via_gic_order(A,B,C),T)
      :: 'that it is not the case that @(A) extends the right to be given access to
      @(B) to @(C) via order became true at @(T)'.\n#pred blawx_not_interrupted(Start,includes_persons_via_gic_order(A,B,C),End)
      :: '@(A) extends the right to be given access to @(B) to @(C) via order remained
      the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-includes_persons_via_gic_order(A,B,C),End)
      :: 'it is not the case that @(A) extends the right to be given access to @(B)
      to @(C) via order remained the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(includes_persons_via_gic_order(A,B,C)), blawx_ultimately(includes_persons_via_gic_order(A,B,C)),
      findall(Time,blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(-includes_persons_via_gic_order(A,B,C)), blawx_ultimately(-includes_persons_via_gic_order(A,B,C)),
      findall(Time,blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Time)),[]).\nblawx_as_of(includes_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_initially(includes_persons_via_gic_order(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(BeforeT)).\nblawx_as_of(includes_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),includes_persons_via_gic_order(A,B,C),datetime(Time)).\nblawx_as_of(-includes_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_initially(-includes_persons_via_gic_order(A,B,C)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(BeforeT)).\nblawx_as_of(-includes_persons_via_gic_order(A,B,C),datetime(Time))
      :- blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-includes_persons_via_gic_order(A,B,C),datetime(Time)).\nblawx_during(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Start)), blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_initially(includes_persons_via_gic_order(A,B,C)), blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_ultimately(includes_persons_via_gic_order(A,B,C)), blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),includes_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(includes_persons_via_gic_order(A,B,C)), blawx_ultimately(includes_persons_via_gic_order(A,B,C)),
      blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),includes_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Start)), blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(End))
      :- blawx_initially(-includes_persons_via_gic_order(A,B,C)), blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(End)),
      blawx_not_interrupted(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(End)).\nblawx_during(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_ultimately(-includes_persons_via_gic_order(A,B,C)), blawx_becomes(includes_persons_via_gic_order(A,B,C),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-includes_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_during(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(eot))
      :- blawx_initially(-includes_persons_via_gic_order(A,B,C)), blawx_ultimately(-includes_persons_via_gic_order(A,B,C)),
      blawx_becomes(-includes_persons_via_gic_order(A,B,C),datetime(Start)), blawx_not_interrupted(datetime(bot),-includes_persons_via_gic_order(A,B,C),datetime(eot)).\nblawx_attribute(group,group_not_reffered_to_in_4_1_paragraphs,person).\nblawx_attribute_nlg(group_not_reffered_to_in_4_1_paragraphs,ov,\"\",\"is
      a group of persons who are not referred to in subsection 4(1) for the same reason
      as\",\"\").\n:- dynamic group_not_reffered_to_in_4_1_paragraphs/2.\n#pred group_not_reffered_to_in_4_1_paragraphs(X,Y)
      :: '@(X) is a group of persons who are not referred to in subsection 4(1) for
      the same reason as @(Y)'.\n#pred holds(user,group_not_reffered_to_in_4_1_paragraphs,X,Y)
      :: 'it is provided as a fact that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y)'.\n#pred holds(user,-group_not_reffered_to_in_4_1_paragraphs,X,Y)
      :: 'it is provided as a fact that it is not the case that @(X) is a group of
      persons who are not referred to in subsection 4(1) for the same reason as @(Y)'.\n#pred
      holds(Z,group_not_reffered_to_in_4_1_paragraphs,X,Y) :: 'the conclusion in @(Z)
      that @(X) is a group of persons who are not referred to in subsection 4(1) for
      the same reason as @(Y) holds'.\n#pred holds(Z,-group_not_reffered_to_in_4_1_paragraphs,X,Y)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a group of persons
      who are not referred to in subsection 4(1) for the same reason as @(Y) holds'.\n#pred
      according_to(Z,group_not_reffered_to_in_4_1_paragraphs,X,Y) :: 'according to
      @(Z), @(X) is a group of persons who are not referred to in subsection 4(1)
      for the same reason as @(Y)'.\n#pred according_to(Z,-group_not_reffered_to_in_4_1_paragraphs,X,Y)
      :: 'according to @(Z), it is not the case that @(X) is a group of persons who
      are not referred to in subsection 4(1) for the same reason as @(Y)'.\n#pred
      blawx_defeated(Z,group_not_reffered_to_in_4_1_paragraphs,X,Y) :: 'the conclusion
      in @(Z) that @(X) is a group of persons who are not referred to in subsection
      4(1) for the same reason as @(Y) is defeated'.\n#pred blawx_defeated(Z,-group_not_reffered_to_in_4_1_paragraphs,X,Y)
      :: 'the conclusion in @(Z) that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) is defeated'.\n#pred blawx_initially(group_not_reffered_to_in_4_1_paragraphs(X,Y))
      :: 'that @(X) is a group of persons who are not referred to in subsection 4(1)
      for the same reason as @(Y) holds initially'.\n#pred blawx_initially(-group_not_reffered_to_in_4_1_paragraphs(X,Y))
      :: 'that it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) holds initially'.\n#pred blawx_ultimately(group_not_reffered_to_in_4_1_paragraphs(X,Y))
      :: 'that @(X) is a group of persons who are not referred to in subsection 4(1)
      for the same reason as @(Y) holds ultimately'.\n#pred blawx_ultimately(-group_not_reffered_to_in_4_1_paragraphs(X,Y))
      :: 'that it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) holds ultimately'.\n#pred
      blawx_as_of(group_not_reffered_to_in_4_1_paragraphs(X,Y),T) :: 'that @(X) is
      a group of persons who are not referred to in subsection 4(1) for the same reason
      as @(Y) holds at @(T)'.\n#pred blawx_as_of(-group_not_reffered_to_in_4_1_paragraphs(X,Y),T)
      :: 'that it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) holds at @(T)'.\n#pred blawx_during(T1,group_not_reffered_to_in_4_1_paragraphs(X,Y),T2)
      :: 'that @(X) is a group of persons who are not referred to in subsection 4(1)
      for the same reason as @(Y) held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-group_not_reffered_to_in_4_1_paragraphs(X,Y),T2)
      :: 'that it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),T) :: 'that @(X)
      is a group of persons who are not referred to in subsection 4(1) for the same
      reason as @(Y) became true at @(T)'.\n#pred blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),T)
      :: 'that it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) became true at @(T)'.\n#pred
      blawx_not_interrupted(Start,group_not_reffered_to_in_4_1_paragraphs(X,Y),End)
      :: '@(X) is a group of persons who are not referred to in subsection 4(1) for
      the same reason as @(Y) remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-group_not_reffered_to_in_4_1_paragraphs(X,Y),End)
      :: 'it is not the case that @(X) is a group of persons who are not referred
      to in subsection 4(1) for the same reason as @(Y) remained the case between
      @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_initially(group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_ultimately(group_not_reffered_to_in_4_1_paragraphs(X,Y)),
      findall(Time,blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_initially(-group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_ultimately(-group_not_reffered_to_in_4_1_paragraphs(X,Y)),
      findall(Time,blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)),[]).\nblawx_as_of(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time))
      :- blawx_initially(group_not_reffered_to_in_4_1_paragraphs(X,Y)), BeforeT #<
      Time,blawx_not_interrupted(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(BeforeT)).\nblawx_as_of(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time))
      :- blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)).\nblawx_as_of(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time))
      :- blawx_initially(-group_not_reffered_to_in_4_1_paragraphs(X,Y)), BeforeT #<
      Time,blawx_not_interrupted(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(BeforeT)).\nblawx_as_of(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time))
      :- blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(BeforeT)),BeforeT
      #< Time,blawx_not_interrupted(datetime(BeforeT),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Time)).\nblawx_during(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)).\nblawx_during(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- blawx_initially(group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)).\nblawx_during(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_ultimately(group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot)).\nblawx_during(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_initially(group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_ultimately(group_not_reffered_to_in_4_1_paragraphs(X,Y)),
      blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot)).\nblawx_during(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)), Start
      #< End, blawx_not_interrupted(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)).\nblawx_during(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End))
      :- blawx_initially(-group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)),
      blawx_not_interrupted(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(End)).\nblawx_during(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_ultimately(-group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_becomes(group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot)).\nblawx_during(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot))
      :- blawx_initially(-group_not_reffered_to_in_4_1_paragraphs(X,Y)), blawx_ultimately(-group_not_reffered_to_in_4_1_paragraphs(X,Y)),
      blawx_becomes(-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-group_not_reffered_to_in_4_1_paragraphs(X,Y),datetime(eot)).\n\naccording_to(sec_4__subsec_2_section,may_include_persons_via_gic_order,governor_in_council,Record,Group)
      :- person(Person),\nrecord(Record),\ngroup(Group),\nnot according_to(sec_4__subsec_1_section,has_a_right_to_access_record,Person,Record),\ngroup_not_reffered_to_in_4_1_paragraphs(Group,Person).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_2_section,may_include_persons_via_gic_order,governor_in_council,Record,Group)
      :- according_to(sec_4__subsec_2_section,may_include_persons_via_gic_order,governor_in_council,Record,Group).\n\n%
      BLAWX CHECK DUPLICATES\n  may_include_persons_via_gic_order(governor_in_council,Record,Group)
      :- holds(sec_4__subsec_2_section,may_include_persons_via_gic_order,governor_in_council,Record,Group).\n\naccording_to(sec_4__subsec_2_section,has_a_right_to_access_record,Person,Record)
      :- person(Person),\nrecord(Record),\ngroup(Group),\ngovernment_institution(GovInstitution),\nmay_include_persons_via_gic_order(governor_in_council,Record,Group),\nincludes_persons_via_gic_order(governor_in_council,Record,Group),\ngroup_not_reffered_to_in_4_1_paragraphs(Group,Person),\nunder_the_control_of_government_institution(Record,GovInstitution).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_2_section,has_a_right_to_access_record,Person,Record)
      :- according_to(sec_4__subsec_2_section,has_a_right_to_access_record,Person,Record),
      not blawx_defeated(sec_4__subsec_2_section,has_a_right_to_access_record,Person,Record).\n\n%
      BLAWX CHECK DUPLICATES\n  has_a_right_to_access_record(Person,Record) :- holds(sec_4__subsec_2_section,has_a_right_to_access_record,Person,Record).\n\naccording_to(sec_4__subsec_2_section,must_give_person_access_to_record,GovInstitution,Person,Record)
      :- person(Person),\nrecord(Record),\ngroup(Group),\ngovernment_institution(GovInstitution),\nrequest(Request),\nmay_include_persons_via_gic_order(governor_in_council,Record,Group),\nincludes_persons_via_gic_order(governor_in_council,Record,Group),\ngroup_not_reffered_to_in_4_1_paragraphs(Group,Person),\nunder_the_control_of_government_institution(Record,GovInstitution),\nsubmitted_request_for_record_to_governent_institution(Person,Request,GovInstitution,Record).\n\n%
      BLAWX CHECK DUPLICATES\nholds(sec_4__subsec_2_section,must_give_person_access_to_record,GovInstitution,Person,Record)
      :- according_to(sec_4__subsec_2_section,must_give_person_access_to_record,GovInstitution,Person,Record),
      not blawx_defeated(sec_4__subsec_2_section,must_give_person_access_to_record,GovInstitution,Person,Record).\n\n%
      BLAWX CHECK DUPLICATES\n  must_give_person_access_to_record(GovInstitution,Person,Record)
      :- holds(sec_4__subsec_2_section,must_give_person_access_to_record,GovInstitution,Person,Record)."
- model: blawx.blawxtest
  pk: 2
  fields:
    ruledoc: 1
    test_name: s4_right_to_access
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="~IK?k4=6L?B0#z-6KT#7" x="8" y="20"><statement name="query"><block type="holds"
      id="/0ir-Q8,Wh2Rkch#bP2F"><value name="section"><block type="doc_selector" id="W1xOYx3e9:MLZ581KU2+"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_4__subsec_1_section"></mutation><field
      name="doc_part_name">ATIA 4.1</field></block></value><statement name="statement"><block
      type="attribute_selector" id=",];QG=nu$D^4qiQqGfwv"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="has_a_right_to_access_record" attributetype="record" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">has a right to access</field><field
      name="postfix"></field><value name="first_element"><block type="object_selector"
      id="^WZ~d!#k!Xx]DVdw;b8A"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field
      name="object_name">bob</field></block></value><value name="second_element"><block
      type="object_selector" id="hk0l}6I@G=k~RJ$,=$.h"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="record_X"></mutation><field name="object_name">record_X</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: ?- holds(sec_4__subsec_1_section,has_a_right_to_access_record,bob,record_X).
    tutorial: ''
    view: '[''view_att_has_a_right_to_access_record'', ''view_att_meets_4_1_requirement'',
      ''view_rel_must_give_person_access_to_record'', ''view_cat_governor_in_council'',
      ''view_cat_information'', ''view_rel_may_include_persons_via_gic_order'']'
    fact_scenario: '{''facts'': [{''from_ontology'': True, ''type'': ''true'', ''category'':
      ''governor_in_council'', ''object'': ''governor_in_council''}, {''from_ontology'':
      False, ''type'': ''true'', ''category'': ''person'', ''object'': ''bob''}, {''from_ontology'':
      False, ''type'': ''true'', ''category'': ''record'', ''object'': ''record_X''},
      {''from_ontology'': False, ''type'': ''true'', ''category'': ''group'', ''object'':
      ''group_Y''}, {''from_ontology'': False, ''type'': ''true'', ''category'': ''request'',
      ''object'': ''request_Z''}, {''from_ontology'': False, ''type'': ''true'', ''category'':
      ''government_institution'', ''object'': ''the_Treasury_Board_of_Canada_Secretariat''},
      {''from_ontology'': False, ''type'': ''true'', ''attribute'': ''under_the_control_of_government_institution'',
      ''object'': ''record_X'', ''value'': ''the_Treasury_Board_of_Canada_Secretariat''},
      {''from_ontology'': False, ''type'': ''true'', ''attribute'': ''canadian_citizen'',
      ''object'': ''bob''}, {''from_ontology'': False, ''type'': ''true'', ''attribute'':
      ''permanent_resident'', ''object'': ''bob''}, {''from_ontology'': False, ''type'':
      ''true'', ''attribute'': ''group_not_reffered_to_in_4_1_paragraphs'', ''object'':
      ''group_Y'', ''value'': ''bob''}, {''from_ontology'': False, ''relationship'':
      ''may_include_persons_via_gic_order'', ''type'': ''true'', ''parameter1'': ''governor_in_council'',
      ''parameter2'': ''record_X'', ''parameter3'': ''group_Y''}, {''from_ontology'':
      False, ''relationship'': ''includes_persons_via_gic_order'', ''type'': ''true'',
      ''parameter1'': ''governor_in_council'', ''parameter2'': ''record_X'', ''parameter3'':
      ''group_Y''}, {''from_ontology'': False, ''relationship'': ''submitted_request_for_record_to_governent_institution'',
      ''type'': ''true'', ''parameter1'': ''bob'', ''parameter2'': ''request_Z'',
      ''parameter3'': ''the_Treasury_Board_of_Canada_Secretariat'', ''parameter4'':
      ''record_X''}]}'
- model: blawx.blawxtest
  pk: 3
  fields:
    ruledoc: 1
    test_name: supertest
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="7a(Si1.#%z(Vc8+/s59f" x="0" y="0"><statement name="statements"><block type="object_declaration"
      id="yywa:8c!L3?eEEz#Xo0!"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">bob</field><field name="postfix">is a person</field><next><block
      type="object_declaration" id="K?_]Iz,%I.jjJ,T3R|`D"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="record" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">record_X</field><field name="postfix">is a record</field><next><block
      type="object_declaration" id="^}F{bU:kiGfnk2(G+(vD"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="request" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">request_Z</field><field name="postfix">is a request</field><next><block
      type="object_declaration" id="zJ;}d%%RFSK(rA$$T+4F"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="government_institution" prefix="null" postfix="null"></mutation><field
      name="prefix"></field><field name="object_name">the_Treasury_Board_of_Canada_Secretariat</field><field
      name="postfix">is a government institution</field><next><block type="object_declaration"
      id="+:hn{@s.ltuS_ZJM]@js"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="group"
      prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">group_Y</field><field name="postfix">is a group</field></block></next></block></next></block></next></block></next></block></statement></block><block
      type="unattributed_fact" id="3Pqns2XP12h.tY;BQJgW" x="0" y="193"><statement
      name="statements"><block type="attribute_selector" id="g3gDC^c6{jPn1zBlGDk,"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="under_the_control_of_government_institution"
      attributetype="government_institution" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is under the control of</field><field
      name="postfix"></field><value name="first_element"><block type="object_selector"
      id="hdW2Q,;^_fka1HNyFVG}"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="record_X"></mutation><field
      name="object_name">record_X</field></block></value><value name="second_element"><block
      type="object_selector" id="Nehzq=iW*KS7H|_-84mp"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="the_Treasury_Board_of_Canada_Secretariat"></mutation><field name="object_name">the_Treasury_Board_of_Canada_Secretariat</field></block></value></block></statement></block><block
      type="assume" id="pVkdJPI#8Mvvzw;)+u1n" x="0" y="293"><statement name="statements"><block
      type="relationship_selector4" id="7z50kXbvQP//C6:JYTSA"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="4" relationship_name="submitted_request_for_record_to_governent_institution"
      type1="person" type2="request" type3="government_institution" type4="record"></mutation><field
      name="prefix1"></field><field name="prefix2">submitted</field><field name="prefix3">to
      institution</field><field name="prefix4">requesting access to</field><field
      name="postfix"></field><value name="parameter1"><block type="object_selector"
      id="pGJ~PFE%A}4q5W=/y1Xi"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field
      name="object_name">bob</field></block></value><value name="parameter2"><block
      type="object_selector" id="9{)R,6UC+?+[w-vv0s9P"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="request_Z"></mutation><field name="object_name">request_Z</field></block></value><value
      name="parameter3"><block type="object_selector" id="$b6bVOSwc2RPn0=qdie^"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="the_Treasury_Board_of_Canada_Secretariat"></mutation><field
      name="object_name">the_Treasury_Board_of_Canada_Secretariat</field></block></value><value
      name="parameter4"><block type="object_selector" id="btL/Rx,9eCOo+d?PRF60"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="record_X"></mutation><field
      name="object_name">record_X</field></block></value></block></statement></block><block
      type="assume" id="m{_i).W%E@O,C%=bZhat" x="0" y="393"><statement name="statements"><block
      type="unary_attribute_selector" id="UiD!86g1r%{w^R~0O^rl"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="canadian_citizen" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is a Canadian citizen</field><value name="first_element"><block
      type="object_selector" id="Dc~nf%!h?zR-ufDFt|*+"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="bob"></mutation><field name="object_name">bob</field></block></value></block></statement></block><block
      type="assume" id="S6Exl`s%3}AxrSoG[d7k" x="0" y="493"><statement name="statements"><block
      type="unary_attribute_selector" id=",)88eY6YD#n|)]Ai7_Z6"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="permanent_resident" attributetype="boolean"></mutation><field
      name="prefix"></field><field name="postfix">is a permanent resident within the
      meaning of subsection 2(1) of the Immigration and Refugee Protection Act</field><value
      name="first_element"><block type="object_selector" id="h(0f+{y0-Q?eeFl)Guku"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field name="object_name">bob</field></block></value></block></statement></block><block
      type="assume" id="ZgD)AO*}PLU|%M%8n[3H" disabled="true" x="0" y="593"><statement
      name="statements"><block type="attribute_selector" id="8MGCTZdx02|OZ^rz_:$/"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="group_not_reffered_to_in_4_1_paragraphs"
      attributetype="person" attributeorder="ov"></mutation><field name="prefix"></field><field
      name="infix">is a group of persons who are not referred to in subsection 4(1)
      for the same reason as</field><field name="postfix"></field><value name="first_element"><block
      type="object_selector" id="6iIyS|{pQV4YpEy%1txp"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="group_Y"></mutation><field name="object_name">group_Y</field></block></value><value
      name="second_element"><block type="object_selector" id="00g~VifFQjn`m1YOYmu^"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field name="object_name">bob</field></block></value></block></statement></block><block
      type="assume" id="rVr1:maT0WDCL]U]O$CD" disabled="true" x="0" y="693"><statement
      name="statements"><block type="relationship_selector3" id="h)|YqxqwwpRQseM:QvTv"><mutation
      xmlns="http://www.w3.org/1999/xhtml" arity="3" relationship_name="may_include_persons_via_gic_order"
      type1="governor_in_council" type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">may, by order, extend the right to be given access to</field><field
      name="prefix3">to</field><field name="postfix">and set such conditions they
      deem appropriate</field><value name="parameter1"><block type="object_selector"
      id="mV]b74f{`pS5{m8hZ}gW"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="object_selector" id="2+01y:vcx@h3SMCT6{K2"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="record_X"></mutation><field name="object_name">record_X</field></block></value><value
      name="parameter3"><block type="object_selector" id="]h5vxHdiMu90_H}LSJQu"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="group_Y"></mutation><field
      name="object_name">group_Y</field></block></value><next><block type="relationship_selector3"
      id="NCkB1T(DEwwK[;jC?^D="><mutation xmlns="http://www.w3.org/1999/xhtml" arity="3"
      relationship_name="includes_persons_via_gic_order" type1="governor_in_council"
      type2="record" type3="group"></mutation><field name="prefix1"></field><field
      name="prefix2">extends the right to be given access to</field><field name="prefix3">to</field><field
      name="postfix">via order</field><value name="parameter1"><block type="object_selector"
      id="*9pw*l~HO.wSKEEeX6}="><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="governor_in_council"></mutation><field
      name="object_name">governor_in_council</field></block></value><value name="parameter2"><block
      type="object_selector" id=",gMNAZ$VsU^hg0lsCU6L"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="record_X"></mutation><field name="object_name">record_X</field></block></value><value
      name="parameter3"><block type="object_selector" id="vWnjn]b4rv=BdYth(.ij"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="group_Y"></mutation><field
      name="object_name">group_Y</field></block></value></block></next></block></statement></block><block
      type="query" id="~IK?k4=6L?B0#z-6KT#7" disabled="true" x="0" y="829"><statement
      name="query"><block type="attribute_selector" id=",];QG=nu$D^4qiQqGfwv"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attributename="has_a_right_to_access_record"
      attributetype="record" attributeorder="ov"></mutation><field name="prefix"></field><field
      name="infix">has a right to access</field><field name="postfix"></field><value
      name="first_element"><block type="object_selector" id="^WZ~d!#k!Xx]DVdw;b8A"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field name="object_name">bob</field></block></value><value
      name="second_element"><block type="object_selector" id="hk0l}6I@G=k~RJ$,=$.h"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="record_X"></mutation><field
      name="object_name">record_X</field></block></value></block></statement></block><block
      type="query" id="#._fIEI59hPh|WfPs%8?" x="0" y="929"><statement name="query"><block
      type="relationship_selector3" id=",nB.a3:6[g1DcKKsuM?H"><mutation xmlns="http://www.w3.org/1999/xhtml"
      arity="3" relationship_name="must_give_person_access_to_record" type1="government_institution"
      type2="person" type3="record"></mutation><field name="prefix1"></field><field
      name="prefix2">must give</field><field name="prefix3">access to</field><field
      name="postfix"></field><value name="parameter1"><block type="object_selector"
      id="?_uluy`#;E6b^IX0OFrL"><mutation xmlns="http://www.w3.org/1999/xhtml" objectname="the_Treasury_Board_of_Canada_Secretariat"></mutation><field
      name="object_name">the_Treasury_Board_of_Canada_Secretariat</field></block></value><value
      name="parameter2"><block type="object_selector" id="{zfdWYzsL(jpP$F1;u{Z"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="bob"></mutation><field name="object_name">bob</field></block></value><value
      name="parameter3"><block type="object_selector" id="!e*6p^f]#X~UP(1ov;vO"><mutation
      xmlns="http://www.w3.org/1999/xhtml" objectname="record_X"></mutation><field
      name="object_name">record_X</field></block></value></block></statement></block></xml>
    scasp_encoding: 'person(bob).

      record(record_X).

      request(request_Z).

      government_institution(the_Treasury_Board_of_Canada_Secretariat).

      group(group_Y).


      under_the_control_of_government_institution(record_X,the_Treasury_Board_of_Canada_Secretariat).


      #abducible submitted_request_for_record_to_governent_institution(bob,request_Z,the_Treasury_Board_of_Canada_Secretariat,record_X).


      #abducible canadian_citizen(bob).


      #abducible permanent_resident(bob).


      ?- must_give_person_access_to_record(the_Treasury_Board_of_Canada_Secretariat,bob,record_X).'
    tutorial: ''
    view: ''
    fact_scenario: ''
