- model: blawx.ruledoc
  pk: 1
  fields:
    ruledoc_name: Wills Act
    rule_text: "Wills Act\r\n\r\n1. A person over the age of 18 may make a will.\r\n2.
      An active military member over the age of 14 may make a will."
    rule_slug: wills-act
    akoma_ntoso: <?xml version="1.0" encoding="UTF-8"?><akomaNtoso xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><act><preface><p
      class="title"><shortTitle>Wills Act</shortTitle></p></preface><body><section
      eId="sec_1"><num>1</num><content><p>A person over the age of 18 may make a will.</p></content></section><section
      eId="sec_2"><num>2</num><content><p>An active military member over the age of
      14 may make a will.</p></content></section></body></act></akomaNtoso>
    navtree: '<nav class="column">

      <div class="lawpart act"><div class="form-check"><input class="form-check-input"
      type="radio" name="section" id="root_section" checked><div class="lawtext"><i
      class="bi bi-caret-right" data-bs-toggle="collapse" data-bs-target="#root"></i>Wills
      Act</div></div></div><div class="subparts collapse" id="root"><div class="lawpart
      section"><div class="form-check"><input class="form-check-input" type="radio"
      name="section" id="sec_1_section"><div class="lawtext"><num>1</num> <content
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>A person over the
      age of 18 may make a will.</p></content></div></div></div><div class="lawpart
      section"><div class="form-check"><input class="form-check-input" type="radio"
      name="section" id="sec_2_section"><div class="lawtext"><num>2</num> <content
      xmlns="http://docs.oasis-open.org/legaldocml/ns/akn/3.0"><p>An active military
      member over the age of 14 may make a will.</p></content></div></div></div></div></nav>'
    scasp_encoding: ''
    tutorial: ''
    owner: 2
    published: false
- model: blawx.workspace
  pk: 1
  fields:
    ruledoc: 1
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 2
  fields:
    ruledoc: 1
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="aECNt(H}#:DQpaQ]yKzK" x="38" y="32"><statement name="statements"><block
      type="new_category_declaration" id="/^F9gJlpA+r=p+(^Tdg#"><field name="category_name">person</field><field
      name="prefix"></field><field name="first_element">object</field><field name="postfix">is
      a person</field><next><block type="new_attribute_declaration" id="3mxIj@$2Nq*m`+oVERjA"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;]]"
      attribute_type="boolean" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">eligible</field><field
      name="attribute_type">boolean</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">'s attribute name is</field><field
      name="second_element">value</field><field name="postfix">may make a will</field><next><block
      type="new_attribute_declaration" id="3aD=anZH]7pe1Z~]y{sU"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" category_list="[[&quot;person&quot;,&quot;person&quot;]]"
      attribute_type="number" attribute_list="[[&quot;true / false&quot;,&quot;boolean&quot;],[&quot;number&quot;,&quot;number&quot;],[&quot;date&quot;,&quot;date&quot;],[&quot;time&quot;,&quot;time&quot;],[&quot;datetime&quot;,&quot;datetime&quot;],[&quot;duration&quot;,&quot;duration&quot;],[&quot;list&quot;,&quot;list&quot;],[&quot;person&quot;,&quot;person&quot;]]"></mutation><field
      name="category_name">person</field><field name="attribute_name">age</field><field
      name="attribute_type">number</field><field name="order">ov</field><field name="prefix"></field><field
      name="first_element">object</field><field name="infix">is</field><field name="second_element">value</field><field
      name="postfix">years of age</field></block></next></block></next></block></statement></block><block
      type="attributed_rule" id="-)vwG6{saE[5(3r^=%j]" x="41" y="304"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="A3oF)YvGz4/#G2O7BDL="><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"
      category_list="[[&quot;person&quot;,&quot;person&quot;]]"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="jho?N`]_2;HUXOYqek;V"><field name="variable_name">Person</field></block></value><next><block
      type="attribute_selector" id="epHy#fCq9w*au[SN=*Q*"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="age" attributetype="# Number" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is</field><field name="postfix">years
      of age</field><value name="first_element"><block type="variable" id="G@Ys,a73=(/?rx]wlnFY"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="uCecYzGU_f8WZ/;^Z%_d"><field name="variable_name">Age</field></block></value><next><block
      type="numerical_constraint" id="6vV--u~Y[3y3%;tjG_|+"><field name="operator">gte</field><value
      name="first_comparator"><block type="variable" id="j,e5WF5E$Le^xbU01)NB"><field
      name="variable_name">Age</field></block></value><value name="second_comparator"><block
      type="number_value" id="$muy%R..)5M)/W!B}d/0"><field name="value">18</field></block></value></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="@Sh{%4~,p5;XAs;8Bxic"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_1_section"></mutation><field
      name="doc_part_name">WA 1</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="1XuJny0Zwc7~TBX:[]n="><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="eligible" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">may make a will</field><value name="first_element"><block type="variable"
      id=".:1I{23gTb=FRerN{p{$"><field name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_category(person).\nblawx_category_nlg(person,\"\",\"is
      a person\").\n:- dynamic person/1.\n#pred person(X) :: '@(X) is a person'.\n#pred
      holds(user,person,X) :: 'it is provided as a fact that @(X) is a person'.\n#pred
      holds(user,-person,X) :: 'it is provided as a fact that it is not the case that
      @(X) is a person'.\n#pred holds(Z,person,X) :: 'the conclusion in @(Z) that
      @(X) is a person holds'.\n#pred holds(Z,-person,X) :: 'the conclusion in @(Z)
      that it is not the case that @(X) is a person holds'.\n#pred according_to(Z,person,X)
      :: 'according to @(Z), @(X) is a person'.\n#pred according_to(Z,-person,X) ::
      'according to @(Z), it is not the case that @(X) is a person'.\n#pred blawx_defeated(Z,person,X)
      :: 'the conclusion in @(Z) that @(X) is a person is defeated'.\n#pred blawx_defeated(Z,-person,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) is a person is
      defeated'.\n#pred blawx_initially(person(X)) :: 'that @(X) is a person holds
      initially'.\n#pred blawx_initially(-person(X)) :: 'that it is not the case that
      @(X) is a person holds initially'.\n#pred blawx_ultimately(person(X)) :: 'that
      @(X) is a person holds ultimately'.\n#pred blawx_ultimately(-person(X)) :: 'that
      it is not the case that @(X) is a person holds ultimately'.\n#pred blawx_as_of(person(X),T)
      :: 'that @(X) is a person holds at @(T)'.\n#pred blawx_as_of(-person(X),T) ::
      'that it is not the case that @(X) is a person holds at @(T)'.\n#pred blawx_during(T1,person(X),T2)
      :: 'that @(X) is a person held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-person(X),T2)
      :: 'that it is not the case that @(X) is a person held between @(T1) and @(T2)'.\n#pred
      blawx_becomes(person(X),T) :: 'that @(X) is a person became true at @(T)'.\n#pred
      blawx_becomes(-person(X),T) :: 'that it is not the case that @(X) is a person
      became true at @(T)'.\n#pred blawx_not_interrupted(Start,person(X),End) :: '@(X)
      is a person remained the case between @(Start) and @(End)'.\n#pred blawx_not_interrupted(Start,-person(X),End)
      :: 'it is not the case that @(X) is a person remained the case between @(Start)
      and @(End)'.\nblawx_not_interrupted(datetime(Start),person(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-person(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),person(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-person(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),person(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-person(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-person(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(person(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),person(X),datetime(eot))
      :- blawx_initially(person(X)), blawx_ultimately(person(X)), findall(Time,blawx_becomes(-person(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-person(X),datetime(eot))
      :- blawx_initially(-person(X)), blawx_ultimately(-person(X)), findall(Time,blawx_becomes(person(X),datetime(Time)),[]).\nblawx_as_of(person(X),datetime(Time))
      :- blawx_initially(person(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),person(X),datetime(BeforeT)).\nblawx_as_of(person(X),datetime(Time))
      :- blawx_becomes(person(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),person(X),datetime(Time)).\nblawx_as_of(-person(X),datetime(Time))
      :- blawx_initially(-person(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-person(X),datetime(BeforeT)).\nblawx_as_of(-person(X),datetime(Time))
      :- blawx_becomes(-person(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-person(X),datetime(Time)).\nblawx_during(datetime(Start),person(X),datetime(End))
      :- blawx_becomes(person(X),datetime(Start)), blawx_becomes(-person(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),person(X),datetime(End)).\nblawx_during(datetime(bot),person(X),datetime(End))
      :- blawx_initially(person(X)), blawx_becomes(-person(X),datetime(End)), blawx_not_interrupted(datetime(bot),person(X),datetime(End)).\nblawx_during(datetime(Start),person(X),datetime(eot))
      :- blawx_ultimately(person(X)), blawx_becomes(-person(X),datetime(Start)), blawx_not_interrupted(datetime(Start),person(X),datetime(eot)).\nblawx_during(datetime(bot),person(X),datetime(eot))
      :- blawx_initially(person(X)), blawx_ultimately(person(X)), blawx_becomes(-person(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),person(X),datetime(eot)).\nblawx_during(datetime(Start),-person(X),datetime(End))
      :- blawx_becomes(-person(X),datetime(Start)), blawx_becomes(person(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-person(X),datetime(End)).\nblawx_during(datetime(bot),-person(X),datetime(End))
      :- blawx_initially(-person(X)), blawx_becomes(person(X),datetime(End)), blawx_not_interrupted(datetime(bot),-person(X),datetime(End)).\nblawx_during(datetime(Start),-person(X),datetime(eot))
      :- blawx_ultimately(-person(X)), blawx_becomes(person(X),datetime(Start)), blawx_not_interrupted(datetime(Start),-person(X),datetime(eot)).\nblawx_during(datetime(bot),-person(X),datetime(eot))
      :- blawx_initially(-person(X)), blawx_ultimately(-person(X)), blawx_becomes(-person(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-person(X),datetime(eot)).\nblawx_attribute(person,eligible,boolean).\nblawx_attribute_nlg(eligible,not_applicable,\"\",not_applicable,\"may
      make a will\").\n:- dynamic eligible/1.\n#pred eligible(X) :: '@(X) may make
      a will'.\n#pred holds(user,eligible,X) :: 'it is provided as a fact that @(X)
      may make a will'.\n#pred holds(user,-eligible,X) :: 'it is provided as a fact
      that it is not the case that @(X) may make a will'.\n#pred holds(Z,eligible,X)
      :: 'the conclusion in @(Z) that @(X) may make a will holds'.\n#pred holds(Z,-eligible,X)
      :: 'the conclusion in @(Z) that it is not the case that @(X) may make a will
      holds'.\n#pred according_to(Z,eligible,X) :: 'according to @(Z), @(X) may make
      a will'.\n#pred according_to(Z,-eligible,X) :: 'according to @(Z), it is not
      the case that @(X) may make a will'.\n#pred blawx_defeated(Z,eligible,X) ::
      'the conclusion in @(Z) that @(X) may make a will is defeated'.\n#pred blawx_defeated(Z,-eligible,X)
      :: 'the conclusion in @(Z) that @(X) may make a will is defeated'.\n#pred blawx_initially(eligible(X))
      :: 'that @(X) may make a will holds initially'.\n#pred blawx_initially(-eligible(X))
      :: 'that it is not the case that @(X) may make a will holds initially'.\n#pred
      blawx_ultimately(eligible(X)) :: 'that @(X) may make a will holds ultimately'.\n#pred
      blawx_ultimately(-eligible(X)) :: 'that it is not the case that @(X) may make
      a will holds ultimately'.\n#pred blawx_as_of(eligible(X),T) :: 'that @(X) may
      make a will holds at @(T)'.\n#pred blawx_as_of(-eligible(X),T) :: 'that it is
      not the case that @(X) may make a will holds at @(T)'.\n#pred blawx_during(T1,eligible(X),T2)
      :: 'that @(X) may make a will held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-eligible(X),T2)
      :: 'that it is not the case that @(X) may make a will held between @(T1) and
      @(T2)'.\n#pred blawx_becomes(eligible(X),T) :: 'that @(X) may make a will became
      true at @(T)'.\n#pred blawx_becomes(-eligible(X),T) :: 'that it is not the case
      that @(X) may make a will became true at @(T)'.\n#pred blawx_not_interrupted(Start,eligible(X),End)
      :: '@(X) may make a will remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-eligible(X),End) :: 'it is not the case that @(X)
      may make a will remained the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),eligible(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-eligible(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-eligible(X),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(eligible(X),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),eligible(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-eligible(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-eligible(X),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(eligible(X),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),eligible(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-eligible(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-eligible(X),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(eligible(X),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),eligible(X),datetime(eot))
      :- blawx_initially(eligible(X)), blawx_ultimately(eligible(X)), findall(Time,blawx_becomes(-eligible(X),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-eligible(X),datetime(eot))
      :- blawx_initially(-eligible(X)), blawx_ultimately(-eligible(X)), findall(Time,blawx_becomes(eligible(X),datetime(Time)),[]).\nblawx_as_of(eligible(X),datetime(Time))
      :- blawx_initially(eligible(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),eligible(X),datetime(BeforeT)).\nblawx_as_of(eligible(X),datetime(Time))
      :- blawx_becomes(eligible(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),eligible(X),datetime(Time)).\nblawx_as_of(-eligible(X),datetime(Time))
      :- blawx_initially(-eligible(X)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-eligible(X),datetime(BeforeT)).\nblawx_as_of(-eligible(X),datetime(Time))
      :- blawx_becomes(-eligible(X),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-eligible(X),datetime(Time)).\nblawx_during(datetime(Start),eligible(X),datetime(End))
      :- blawx_becomes(eligible(X),datetime(Start)), blawx_becomes(-eligible(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),eligible(X),datetime(End)).\nblawx_during(datetime(bot),eligible(X),datetime(End))
      :- blawx_initially(eligible(X)), blawx_becomes(-eligible(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),eligible(X),datetime(End)).\nblawx_during(datetime(Start),eligible(X),datetime(eot))
      :- blawx_ultimately(eligible(X)), blawx_becomes(-eligible(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),eligible(X),datetime(eot)).\nblawx_during(datetime(bot),eligible(X),datetime(eot))
      :- blawx_initially(eligible(X)), blawx_ultimately(eligible(X)), blawx_becomes(-eligible(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),eligible(X),datetime(eot)).\nblawx_during(datetime(Start),-eligible(X),datetime(End))
      :- blawx_becomes(-eligible(X),datetime(Start)), blawx_becomes(eligible(X),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-eligible(X),datetime(End)).\nblawx_during(datetime(bot),-eligible(X),datetime(End))
      :- blawx_initially(-eligible(X)), blawx_becomes(eligible(X),datetime(End)),
      blawx_not_interrupted(datetime(bot),-eligible(X),datetime(End)).\nblawx_during(datetime(Start),-eligible(X),datetime(eot))
      :- blawx_ultimately(-eligible(X)), blawx_becomes(eligible(X),datetime(Start)),
      blawx_not_interrupted(datetime(Start),-eligible(X),datetime(eot)).\nblawx_during(datetime(bot),-eligible(X),datetime(eot))
      :- blawx_initially(-eligible(X)), blawx_ultimately(-eligible(X)), blawx_becomes(-eligible(X),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-eligible(X),datetime(eot)).\nblawx_attribute(person,age,number).\nblawx_attribute_nlg(age,ov,\"\",\"is\",\"years
      of age\").\n:- dynamic age/2.\n#pred age(X,Y) :: '@(X) is @(Y) years of age'.\n#pred
      holds(user,age,X,Y) :: 'it is provided as a fact that @(X) is @(Y) years of
      age'.\n#pred holds(user,-age,X,Y) :: 'it is provided as a fact that it is not
      the case that @(X) is @(Y) years of age'.\n#pred holds(Z,age,X,Y) :: 'the conclusion
      in @(Z) that @(X) is @(Y) years of age holds'.\n#pred holds(Z,-age,X,Y) :: 'the
      conclusion in @(Z) that it is not the case that @(X) is @(Y) years of age holds'.\n#pred
      according_to(Z,age,X,Y) :: 'according to @(Z), @(X) is @(Y) years of age'.\n#pred
      according_to(Z,-age,X,Y) :: 'according to @(Z), it is not the case that @(X)
      is @(Y) years of age'.\n#pred blawx_defeated(Z,age,X,Y) :: 'the conclusion in
      @(Z) that @(X) is @(Y) years of age is defeated'.\n#pred blawx_defeated(Z,-age,X,Y)
      :: 'the conclusion in @(Z) that @(X) is @(Y) years of age is defeated'.\n#pred
      blawx_initially(age(X,Y)) :: 'that @(X) is @(Y) years of age holds initially'.\n#pred
      blawx_initially(-age(X,Y)) :: 'that it is not the case that @(X) is @(Y) years
      of age holds initially'.\n#pred blawx_ultimately(age(X,Y)) :: 'that @(X) is
      @(Y) years of age holds ultimately'.\n#pred blawx_ultimately(-age(X,Y)) :: 'that
      it is not the case that @(X) is @(Y) years of age holds ultimately'.\n#pred
      blawx_as_of(age(X,Y),T) :: 'that @(X) is @(Y) years of age holds at @(T)'.\n#pred
      blawx_as_of(-age(X,Y),T) :: 'that it is not the case that @(X) is @(Y) years
      of age holds at @(T)'.\n#pred blawx_during(T1,age(X,Y),T2) :: 'that @(X) is
      @(Y) years of age held between @(T1) and @(T2)'.\n#pred blawx_during(T1,-age(X,Y),T2)
      :: 'that it is not the case that @(X) is @(Y) years of age held between @(T1)
      and @(T2)'.\n#pred blawx_becomes(age(X,Y),T) :: 'that @(X) is @(Y) years of
      age became true at @(T)'.\n#pred blawx_becomes(-age(X,Y),T) :: 'that it is not
      the case that @(X) is @(Y) years of age became true at @(T)'.\n#pred blawx_not_interrupted(Start,age(X,Y),End)
      :: '@(X) is @(Y) years of age remained the case between @(Start) and @(End)'.\n#pred
      blawx_not_interrupted(Start,-age(X,Y),End) :: 'it is not the case that @(X)
      is @(Y) years of age remained the case between @(Start) and @(End)'.\nblawx_not_interrupted(datetime(Start),age(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(-age(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(Start),-age(X,Y),datetime(End))
      :- Start \\= bot, End \\= eot, findall(Time,blawx_becomes(age(X,Y),datetime(Time)),Times),blawx_list_not_between(Times,Start,End).\nblawx_not_interrupted(datetime(bot),age(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(-age(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(bot),-age(X,Y),datetime(End))
      :- End \\= eot, findall(Time,blawx_becomes(age(X,Y),datetime(Time)),Times),blawx_list_not_before(Times,End).\nblawx_not_interrupted(datetime(Start),age(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(-age(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(Start),-age(X,Y),datetime(eot))
      :- Start \\= bot, findall(Time,blawx_becomes(age(X,Y),datetime(Time)),Times),blawx_list_not_after(Times,Start).\nblawx_not_interrupted(datetime(bot),age(X,Y),datetime(eot))
      :- blawx_initially(age(X,Y)), blawx_ultimately(age(X,Y)), findall(Time,blawx_becomes(-age(X,Y),datetime(Time)),[]).\nblawx_not_interrupted(datetime(bot),-age(X,Y),datetime(eot))
      :- blawx_initially(-age(X,Y)), blawx_ultimately(-age(X,Y)), findall(Time,blawx_becomes(age(X,Y),datetime(Time)),[]).\nblawx_as_of(age(X,Y),datetime(Time))
      :- blawx_initially(age(X,Y)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),age(X,Y),datetime(BeforeT)).\nblawx_as_of(age(X,Y),datetime(Time))
      :- blawx_becomes(age(X,Y),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),age(X,Y),datetime(Time)).\nblawx_as_of(-age(X,Y),datetime(Time))
      :- blawx_initially(-age(X,Y)), BeforeT #< Time,blawx_not_interrupted(datetime(bot),-age(X,Y),datetime(BeforeT)).\nblawx_as_of(-age(X,Y),datetime(Time))
      :- blawx_becomes(-age(X,Y),datetime(BeforeT)),BeforeT #< Time,blawx_not_interrupted(datetime(BeforeT),-age(X,Y),datetime(Time)).\nblawx_during(datetime(Start),age(X,Y),datetime(End))
      :- blawx_becomes(age(X,Y),datetime(Start)), blawx_becomes(-age(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),age(X,Y),datetime(End)).\nblawx_during(datetime(bot),age(X,Y),datetime(End))
      :- blawx_initially(age(X,Y)), blawx_becomes(-age(X,Y),datetime(End)), blawx_not_interrupted(datetime(bot),age(X,Y),datetime(End)).\nblawx_during(datetime(Start),age(X,Y),datetime(eot))
      :- blawx_ultimately(age(X,Y)), blawx_becomes(-age(X,Y),datetime(Start)), blawx_not_interrupted(datetime(Start),age(X,Y),datetime(eot)).\nblawx_during(datetime(bot),age(X,Y),datetime(eot))
      :- blawx_initially(age(X,Y)), blawx_ultimately(age(X,Y)), blawx_becomes(-age(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),age(X,Y),datetime(eot)).\nblawx_during(datetime(Start),-age(X,Y),datetime(End))
      :- blawx_becomes(-age(X,Y),datetime(Start)), blawx_becomes(age(X,Y),datetime(End)),
      Start #< End, blawx_not_interrupted(datetime(Start),-age(X,Y),datetime(End)).\nblawx_during(datetime(bot),-age(X,Y),datetime(End))
      :- blawx_initially(-age(X,Y)), blawx_becomes(age(X,Y),datetime(End)), blawx_not_interrupted(datetime(bot),-age(X,Y),datetime(End)).\nblawx_during(datetime(Start),-age(X,Y),datetime(eot))
      :- blawx_ultimately(-age(X,Y)), blawx_becomes(age(X,Y),datetime(Start)), blawx_not_interrupted(datetime(Start),-age(X,Y),datetime(eot)).\nblawx_during(datetime(bot),-age(X,Y),datetime(eot))
      :- blawx_initially(-age(X,Y)), blawx_ultimately(-age(X,Y)), blawx_becomes(-age(X,Y),datetime(Start)),
      blawx_not_interrupted(datetime(bot),-age(X,Y),datetime(eot)).\n\naccording_to(sec_1_section,eligible,Person)
      :- person(Person),\nage(Person,Age),\nblawx_comparison(Age,gte,18).\n\n% BLAWX
      CHECK DUPLICATES\nholds(sec_1_section,eligible,Person) :- according_to(sec_1_section,eligible,Person).\n\n%
      BLAWX CHECK DUPLICATES\n  eligible(Person) :- holds(sec_1_section,eligible,Person)."
- model: blawx.workspace
  pk: 3
  fields:
    ruledoc: 1
    workspace_name: sec_2_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="aECNt(H}#:DQpaQ]yKzK" x="66" y="88"><statement name="statements"><block
      type="new_attribute_declaration" id="1lyAChSKnz3(cSHEiDtq"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="person" attribute_type="boolean"></mutation><field name="category_name">person</field><field
      name="attribute_name">military</field><field name="attribute_type">boolean</field><field
      name="order">ov</field><field name="prefix"></field><field name="first_element">object</field><field
      name="infix">'s attribute name is</field><field name="second_element">value</field><field
      name="postfix">is an active military member</field></block></statement></block><block
      type="attributed_rule" id="!};mTU3-1Y@s2ShVd032" x="67" y="232"><field name="defeasible">FALSE</field><field
      name="inapplicable">FALSE</field><statement name="conditions"><block type="new_object_category"
      id="B{{Ws(Z!;NCo2XudMu1}"><mutation xmlns="http://www.w3.org/1999/xhtml" category_name="person"></mutation><field
      name="category_name">person</field><value name="object"><block type="variable"
      id="jho?N`]_2;HUXOYqek;V"><field name="variable_name">Person</field></block></value><next><block
      type="unary_attribute_selector" id="8oxQ-w3]/vG9u+0[)e9%"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="military" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">is an active military member</field><value name="first_element"><block
      type="variable" id="/]|Y#qL#2UjUpVWD4;ol"><field name="variable_name">Person</field></block></value><next><block
      type="attribute_selector" id="epHy#fCq9w*au[SN=*Q*"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="age" attributetype="# Number" attributeorder="ov"></mutation><field
      name="prefix"></field><field name="infix">is</field><field name="postfix">years
      of age</field><value name="first_element"><block type="variable" id="G@Ys,a73=(/?rx]wlnFY"><field
      name="variable_name">Person</field></block></value><value name="second_element"><block
      type="variable" id="uCecYzGU_f8WZ/;^Z%_d"><field name="variable_name">Age</field></block></value><next><block
      type="numerical_constraint" id="6vV--u~Y[3y3%;tjG_|+"><field name="operator">gte</field><value
      name="first_comparator"><block type="variable" id="j,e5WF5E$Le^xbU01)NB"><field
      name="variable_name">Age</field></block></value><value name="second_comparator"><block
      type="number_value" id="$muy%R..)5M)/W!B}d/0"><field name="value">14</field></block></value></block></next></block></next></block></next></block></statement><value
      name="source"><block type="doc_selector" id="UG#{YYIJo}U$`E8GU{]K"><mutation
      xmlns="http://www.w3.org/1999/xhtml" section_reference="sec_2_section"></mutation><field
      name="doc_part_name">WA 2</field></block></value><statement name="conclusion"><block
      type="unary_attribute_selector" id="Hgv%dX]#VH6Dc7~Y9iqN"><mutation xmlns="http://www.w3.org/1999/xhtml"
      attributename="eligible" attributetype="boolean"></mutation><field name="prefix"></field><field
      name="postfix">may make a will</field><value name="first_element"><block type="variable"
      id="g]^4lzu|)Qp6`!FKFg{h"><field name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: "blawx_attribute(person,military,boolean).\nblawx_attribute_nlg(military,not_applicable,\"\",not_applicable,\"is
      an active military member\").\n#pred military(X) :: '@(X) is an active military
      member'.\n#pred holds(user,military,X) :: 'it is provided as a fact that @(X)
      is an active military member'.\n#pred holds(user,-military,X) :: 'it is provided
      as a fact that it is not the case that @(X) is an active military member'.\n#pred
      holds(Z,military,X) :: 'the conclusion in @(Z) that @(X) is an active military
      member holds'.\n#pred holds(Z,-military,X) :: 'the conclusion in @(Z) that it
      is not the case that @(X) is an active military member holds'.\n#pred according_to(Z,military,X)
      :: 'according to @(Z), @(X) is an active military member'.\n#pred according_to(Z,-military,X)
      :: 'according to @(Z), it is not the case that @(X) is an active military member'.\n#pred
      blawx_defeated(Z,military,X) :: 'the conclusion in @(Z) that @(X) is an active
      military member is defeated'.\n#pred blawx_defeated(Z,-military,X) :: 'the conclusion
      in @(Z) that @(X) is an active military member is defeated'.\n\naccording_to(sec_2_section,eligible,Person)
      :- person(Person),\nmilitary(Person),\nage(Person,Age),\nAge #>= 14.\n\n% BLAWX
      CHECK DUPLICATES\nholds(sec_2_section,eligible,Person) :- according_to(sec_2_section,eligible,Person).\n\n%
      BLAWX CHECK DUPLICATES\n  eligible(Person) :- holds(sec_2_section,eligible,Person)."
- model: blawx.blawxtest
  pk: 1
  fields:
    ruledoc: 1
    test_name: valid_will
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="query"
      id="[H%F(8shmmOZ^!_dk%fF" x="49" y="271"><statement name="query"><block type="unary_attribute_selector"
      id="GiCx]Hr/(hG=WAopR#m;"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="eligible"
      attributetype="boolean"></mutation><field name="prefix"></field><field name="postfix">may
      make a will</field><value name="first_element"><block type="variable" id="dhkXp21P}xgt!ogYtSTC"><field
      name="variable_name">Person</field></block></value></block></statement></block></xml>
    scasp_encoding: ?- eligible(Person).
    tutorial: ''
    view: '[''view_att_eligible'']'
    fact_scenario: ''
